{"version":3,"file":"ej2-angular-treemap.js","sources":["~/@syncfusion/ej2-angular-treemap/src/treemap/colormapping.directive.ts","~/@syncfusion/ej2-angular-treemap/src/treemap/levels.directive.ts","~/@syncfusion/ej2-angular-treemap/src/treemap/treemap.component.ts","~/@syncfusion/ej2-angular-treemap/src/treemap/treemap.module.ts","~/@syncfusion/ej2-angular-treemap/src/treemap/treemap-all.module.ts","~/@syncfusion/ej2-angular-treemap/ej2-angular-treemap.ts"],"names":["input","outputs","__decorate","__metadata"],"mappings":"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","sourcesContent":["import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'from', 'label', 'maxOpacity', 'minOpacity', 'showLegend', 'to', 'value'];\nlet /** @type {?} */ outputs: string[] = [];\nexport class ColorMappingDirective extends ComplexBase<ColorMappingDirective> {\npublic directivePropList: any;\n/**\n * Sets and gets the color for the color-mapping in treemap.\n * \\@default null\n */\npublic color: any;\n/**\n * Sets and gets the value from which the range of color mapping starts.\n * \\@default null\n */\npublic from: any;\n/**\n * Sets and gets the label text for the legend based on color mapping.\n * \\@default null\n */\npublic label: any;\n/**\n * Sets and gets the maximum opacity for the color-mapping in the treemap component.\n * \\@default null\n */\npublic maxOpacity: any;\n/**\n * Sets and gets the minimum opacity for the color-mapping in the treemap component.\n * \\@default null\n */\npublic minOpacity: any;\n/**\n * Enables or disables the visibility of the legend for color mapping in the treemap component.\n * \\@default true\n */\npublic showLegend: any;\n/**\n * Sets and gets the value to which the range of color mapping ends.\n * \\@default null\n */\npublic to: any;\n/**\n * Sets and gets the value for the color-mapping from the data source.\n * \\@default null\n */\npublic value: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-levels>e-colorMappings>e-colorMapping',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ColorMappingDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColorMappingDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColorMappingDirective.ctorParameters;\n/** @type {?} */\nColorMappingDirective.prototype.directivePropList;\n/**\n * Sets and gets the color for the color-mapping in treemap.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.color;\n/**\n * Sets and gets the value from which the range of color mapping starts.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.from;\n/**\n * Sets and gets the label text for the legend based on color mapping.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.label;\n/**\n * Sets and gets the maximum opacity for the color-mapping in the treemap component.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.maxOpacity;\n/**\n * Sets and gets the minimum opacity for the color-mapping in the treemap component.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.minOpacity;\n/**\n * Enables or disables the visibility of the legend for color mapping in the treemap component.\n * \\@default true\n * @type {?}\n */\nColorMappingDirective.prototype.showLegend;\n/**\n * Sets and gets the value to which the range of color mapping ends.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.to;\n/**\n * Sets and gets the value for the color-mapping from the data source.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.value;\n/** @type {?} */\nColorMappingDirective.prototype.viewContainerRef;\n}\n\n/**\n * ColorMapping Array Directive\n */\nexport class ColorMappingsDirective extends ArrayBase<ColorMappingsDirective> {\nconstructor() {\n        super('colormapping');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-levels>e-colorMappings',\n    queries: {\n        children: new ContentChildren(ColorMappingDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ColorMappingsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColorMappingsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColorMappingsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { ColorMappingsDirective } from './colormapping.directive';\n\nlet /** @type {?} */ input: string[] = ['autoFill', 'border', 'colorMapping', 'fill', 'groupGap', 'groupPadding', 'groupPath', 'headerAlignment', 'headerFormat', 'headerHeight', 'headerStyle', 'headerTemplate', 'opacity', 'showHeader', 'templatePosition'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Level Directive\n * ```html\n * <e-levels>\n * <e-level></e-level>\n * </e-levels>\n * ```\n */\nexport class LevelDirective extends ComplexBase<LevelDirective> {\npublic directivePropList: any;\npublic childColorMapping: any;\npublic tags: string[] = ['colorMapping'];\n/**\n * Enables or disables the automatic filling of the colors in the items in the treemap component.\n * \\@default false\n */\npublic autoFill: any;\n/**\n * Sets and gets the options for customizing the color and width of the border of \n * the levels of the treemap component.\n */\npublic border: any;\n/**\n * Sets and gets the options for customizing the color-mapping in the treemap component.\n */\npublic colorMapping: any;\n/**\n * Sets and gets the fill color of the level in the treemap component.\n * \\@default null\n */\npublic fill: any;\n/**\n * Sets and gets the gap between the levels in the treemap component.\n * \\@default 0\n */\npublic groupGap: any;\n/**\n * Sets and gets the padding of levels in the treemap component.\n * \\@default 10\n */\npublic groupPadding: any;\n/**\n * Sets and gets the value path from the data source in the treemap component to render the item.\n * \\@default null\n */\npublic groupPath: any;\n/**\n * Sets and gets the alignment of the header of the treemap component.\n * \\@default 'Near'\n */\npublic headerAlignment: any;\n/**\n * Sets and gets the format of header of the levels in the treemap component.\n * \\@default null\n */\npublic headerFormat: any;\n/**\n * Sets and gets the height of header in the treemap component.\n * \\@default 20\n */\npublic headerHeight: any;\n/**\n * Sets and gets the options for customizing the style of header of the treemap component.\n */\npublic headerStyle: any;\n/**\n * Sets and gets the opacity in the treemap component.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * Shows or hides the header in level of the treemap component.\n * \\@default true\n */\npublic showHeader: any;\n/**\n * Sets and gets the options for customizing the template position of the treemap component.\n * \\@default 'TopLeft'\n */\npublic templatePosition: any;\n/**\n * Sets and gets the template for header in the treemap component.\n * \\@default null\n */\n@Template()\n    public headerTemplate: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-levels>e-level',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childColorMapping: new ContentChild(ColorMappingsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'headerTemplate': [{ type: ContentChild, args: ['headerTemplate', ] },],\n};\n}\n\nfunction LevelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLevelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLevelDirective.ctorParameters;\n/** @type {?} */\nLevelDirective.propDecorators;\n/** @type {?} */\nLevelDirective.prototype.directivePropList;\n/** @type {?} */\nLevelDirective.prototype.childColorMapping;\n/** @type {?} */\nLevelDirective.prototype.tags;\n/**\n * Enables or disables the automatic filling of the colors in the items in the treemap component.\n * \\@default false\n * @type {?}\n */\nLevelDirective.prototype.autoFill;\n/**\n * Sets and gets the options for customizing the color and width of the border of \n * the levels of the treemap component.\n * @type {?}\n */\nLevelDirective.prototype.border;\n/**\n * Sets and gets the options for customizing the color-mapping in the treemap component.\n * @type {?}\n */\nLevelDirective.prototype.colorMapping;\n/**\n * Sets and gets the fill color of the level in the treemap component.\n * \\@default null\n * @type {?}\n */\nLevelDirective.prototype.fill;\n/**\n * Sets and gets the gap between the levels in the treemap component.\n * \\@default 0\n * @type {?}\n */\nLevelDirective.prototype.groupGap;\n/**\n * Sets and gets the padding of levels in the treemap component.\n * \\@default 10\n * @type {?}\n */\nLevelDirective.prototype.groupPadding;\n/**\n * Sets and gets the value path from the data source in the treemap component to render the item.\n * \\@default null\n * @type {?}\n */\nLevelDirective.prototype.groupPath;\n/**\n * Sets and gets the alignment of the header of the treemap component.\n * \\@default 'Near'\n * @type {?}\n */\nLevelDirective.prototype.headerAlignment;\n/**\n * Sets and gets the format of header of the levels in the treemap component.\n * \\@default null\n * @type {?}\n */\nLevelDirective.prototype.headerFormat;\n/**\n * Sets and gets the height of header in the treemap component.\n * \\@default 20\n * @type {?}\n */\nLevelDirective.prototype.headerHeight;\n/**\n * Sets and gets the options for customizing the style of header of the treemap component.\n * @type {?}\n */\nLevelDirective.prototype.headerStyle;\n/**\n * Sets and gets the opacity in the treemap component.\n * \\@default 1\n * @type {?}\n */\nLevelDirective.prototype.opacity;\n/**\n * Shows or hides the header in level of the treemap component.\n * \\@default true\n * @type {?}\n */\nLevelDirective.prototype.showHeader;\n/**\n * Sets and gets the options for customizing the template position of the treemap component.\n * \\@default 'TopLeft'\n * @type {?}\n */\nLevelDirective.prototype.templatePosition;\n/**\n * Sets and gets the template for header in the treemap component.\n * \\@default null\n * @type {?}\n */\nLevelDirective.prototype.headerTemplate;\n/** @type {?} */\nLevelDirective.prototype.viewContainerRef;\n}\n\n/**\n * Level Array Directive\n */\nexport class LevelsDirective extends ArrayBase<LevelsDirective> {\nconstructor() {\n        super('levels');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-treemap>e-levels',\n    queries: {\n        children: new ContentChildren(LevelDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LevelsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLevelsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLevelsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { TreeMap } from '@syncfusion/ej2-treemap';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { LevelsDirective } from './levels.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowImageExport','allowPdfExport','allowPrint','background','border','breadcrumbConnector','colorValuePath','dataSource','description','drillDownView','enableBreadcrumb','enableDrillDown','enablePersistence','enableRtl','equalColorValuePath','format','height','highlightSettings','initialDrillDown','layoutType','leafItemSettings','legendSettings','levels','locale','margin','palette','query','rangeColorValuePath','renderDirection','selectionSettings','tabIndex','theme','titleSettings','tooltipSettings','useGroupingSeparator','weightValuePath','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforePrint','click','doubleClick','drillEnd','drillStart','itemClick','itemHighlight','itemMove','itemRendering','itemSelected','legendItemRendering','legendRendering','load','loaded','mouseMove','resize','rightClick','tooltipRendering'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * TreeMap Component\n * ```html\n * <ej-treemap></ej-treemap>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class TreeMapComponent extends TreeMap implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\n\tbeforePrint: any;\n\tclick: any;\n\tdoubleClick: any;\n\tdrillEnd: any;\n\tdrillStart: any;\n\titemClick: any;\n\titemHighlight: any;\n\titemMove: any;\n\titemRendering: any;\n\titemSelected: any;\n\tlegendItemRendering: any;\n\tlegendRendering: any;\n\tload: any;\n\tloaded: any;\n\tmouseMove: any;\n\tresize: any;\n\trightClick: any;\npublic tooltipRendering: any;\npublic childLevels: QueryList<LevelsDirective>;\npublic tags: string[] = ['levels'];\n    \n    @Template()\npublic tooltipSettings_template: any;\n    \n    @Template()\npublic leafItemSettings_labelTemplate: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('TreeMapTreeMapTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapTreeMapLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapTreeMapHighlight');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapTreeMapSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapPrint');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapPdfExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapImageExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childLevels;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-treemap',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childLevels: new ContentChild(LevelsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltipSettings_template': [{ type: ContentChild, args: ['tooltipSettingsTemplate', ] },],\n'leafItemSettings_labelTemplate': [{ type: ContentChild, args: ['leafItemSettingsLabelTemplate', ] },],\n};\n}\n\nfunction TreeMapComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeMapComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTreeMapComponent.ctorParameters;\n/** @type {?} */\nTreeMapComponent.propDecorators;\n/** @type {?} */\nTreeMapComponent.prototype.context;\n/** @type {?} */\nTreeMapComponent.prototype.tagObjects;\n/** @type {?} */\nTreeMapComponent.prototype.beforePrint;\n/** @type {?} */\nTreeMapComponent.prototype.click;\n/** @type {?} */\nTreeMapComponent.prototype.doubleClick;\n/** @type {?} */\nTreeMapComponent.prototype.drillEnd;\n/** @type {?} */\nTreeMapComponent.prototype.drillStart;\n/** @type {?} */\nTreeMapComponent.prototype.itemClick;\n/** @type {?} */\nTreeMapComponent.prototype.itemHighlight;\n/** @type {?} */\nTreeMapComponent.prototype.itemMove;\n/** @type {?} */\nTreeMapComponent.prototype.itemRendering;\n/** @type {?} */\nTreeMapComponent.prototype.itemSelected;\n/** @type {?} */\nTreeMapComponent.prototype.legendItemRendering;\n/** @type {?} */\nTreeMapComponent.prototype.legendRendering;\n/** @type {?} */\nTreeMapComponent.prototype.load;\n/** @type {?} */\nTreeMapComponent.prototype.loaded;\n/** @type {?} */\nTreeMapComponent.prototype.mouseMove;\n/** @type {?} */\nTreeMapComponent.prototype.resize;\n/** @type {?} */\nTreeMapComponent.prototype.rightClick;\n/** @type {?} */\nTreeMapComponent.prototype.tooltipRendering;\n/** @type {?} */\nTreeMapComponent.prototype.childLevels;\n/** @type {?} */\nTreeMapComponent.prototype.tags;\n/** @type {?} */\nTreeMapComponent.prototype.tooltipSettings_template;\n/** @type {?} */\nTreeMapComponent.prototype.leafItemSettings_labelTemplate;\n/** @type {?} */\nTreeMapComponent.prototype.registerEvents;\n/** @type {?} */\nTreeMapComponent.prototype.addTwoWay;\n/** @type {?} */\nTreeMapComponent.prototype.ngEle;\n/** @type {?} */\nTreeMapComponent.prototype.srenderer;\n/** @type {?} */\nTreeMapComponent.prototype.viewContainerRef;\n/** @type {?} */\nTreeMapComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColorMappingDirective, ColorMappingsDirective } from './colormapping.directive';\nimport { LevelDirective, LevelsDirective } from './levels.directive';\nimport { TreeMapComponent } from './treemap.component';\n/**\n * NgModule definition for the TreeMap component.\n */\nexport class TreeMapModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        TreeMapComponent,\n        ColorMappingDirective,\n        ColorMappingsDirective,\n        LevelDirective,\n        LevelsDirective\n    ],\n    exports: [\n        TreeMapComponent,\n        ColorMappingDirective,\n        ColorMappingsDirective,\n        LevelDirective,\n        LevelsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TreeMapModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeMapModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTreeMapModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColorMappingDirective, ColorMappingsDirective } from './colormapping.directive';\nimport { LevelDirective, LevelsDirective } from './levels.directive';\nimport { TreeMapComponent } from './treemap.component';\nimport { TreeMapModule } from './treemap.module';\nimport {TreeMapTooltip, TreeMapLegend, TreeMapHighlight, TreeMapSelection, Print, PdfExport, ImageExport} from '@syncfusion/ej2-treemap';\n\n\nexport const /** @type {?} */ TreeMapTooltipService: ValueProvider = { provide: 'TreeMapTreeMapTooltip', useValue: TreeMapTooltip};\nexport const /** @type {?} */ TreeMapLegendService: ValueProvider = { provide: 'TreeMapTreeMapLegend', useValue: TreeMapLegend};\nexport const /** @type {?} */ TreeMapHighlightService: ValueProvider = { provide: 'TreeMapTreeMapHighlight', useValue: TreeMapHighlight};\nexport const /** @type {?} */ TreeMapSelectionService: ValueProvider = { provide: 'TreeMapTreeMapSelection', useValue: TreeMapSelection};\nexport const /** @type {?} */ PrintService: ValueProvider = { provide: 'TreeMapPrint', useValue: Print};\nexport const /** @type {?} */ PdfExportService: ValueProvider = { provide: 'TreeMapPdfExport', useValue: PdfExport};\nexport const /** @type {?} */ ImageExportService: ValueProvider = { provide: 'TreeMapImageExport', useValue: ImageExport};\n/**\n * NgModule definition for the TreeMap component with providers.\n */\nexport class TreeMapAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, TreeMapModule],\n    exports: [\n        TreeMapModule\n    ],\n    providers:[\n        TreeMapTooltipService,\n        TreeMapLegendService,\n        TreeMapHighlightService,\n        TreeMapSelectionService,\n        PrintService,\n        PdfExportService,\n        ImageExportService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TreeMapAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeMapAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTreeMapAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ColorMappingDirective,ColorMappingsDirective,LevelDirective,LevelsDirective,TreeMapComponent,TreeMapModule,TreeMapAllModule,TreeMapTooltipService,TreeMapLegendService,TreeMapHighlightService,TreeMapSelectionService,PrintService,PdfExportService,ImageExportService,TreeMap,LevelsData,TreeMapModel,LevelsDataModel,MarkerShape,Border,Margin,Font,CommonTitleSettings,SubTitleSettings,TitleSettings,ColorMapping,LegendSettings,InitialDrillSettings,LeafItemSettings,TooltipSettings,SelectionSettings,HighlightSettings,LevelSettings,BorderModel,MarginModel,FontModel,CommonTitleSettingsModel,SubTitleSettingsModel,TitleSettingsModel,ColorMappingModel,LegendSettingsModel,InitialDrillSettingsModel,LeafItemSettingsModel,TooltipSettingsModel,SelectionSettingsModel,HighlightSettingsModel,LevelSettingsModel,load,loaded,beforePrint,itemRendering,drillStart,drillEnd,itemSelected,itemHighlight,tooltipRendering,itemClick,itemMove,click,doubleClick,rightClick,mouseMove,legendItemRendering,legendRendering,resize,defaultFont,ITreeMapEventArgs,IPrintEventArgs,ILoadEventArgs,ILoadedEventArgs,IItemRenderingEventArgs,IDrillStartEventArgs,IDrillEndEventArgs,IItemClickEventArgs,IItemDataEventArgs,IItemMoveEventArgs,IClickEventArgs,IDoubleClickEventArgs,IRightClickEventArgs,IMouseMoveEventArgs,IItemSelectedEventArgs,IItemHighlightEventArgs,ITreeMapTooltipRenderEventArgs,ITreeMapTooltipArgs,ILegendItemRenderingEventArgs,ILegendRenderingEventArgs,IResizeEventArgs,IFontMapping,IShapes,IThemeStyle,Theme,getThemeStyle,LabelPosition,LayoutMode,Alignment,HighLightMode,SelectionMode,ExportType,LabelAlignment,LegendShape,LegendPosition,LegendMode,LegendOrientation,LabelIntersectAction,LabelPlacement,TreeMapTheme,RenderingMode,Size,stringToNumber,Rect,RectOption,PathOption,measureText,TextOption,textTrim,Location,findPosition,createTextStyle,renderTextElement,setItemTemplateContent,getElement,itemsToOrder,isContainsData,findChildren,findHightLightItems,getTemplateFunction,convertElement,findLabelLocation,measureElement,getArea,getShortestEdge,convertToContainer,convertToRect,getMousePosition,colorMap,deSaturationColor,colorCollections,rgbToHex,getColorByValue,getGradientColor,getPercentageColor,getPercentage,wordWrap,textWrap,hide,orderByArea,maintainSelection,legendMaintain,removeClassNames,applyOptions,textFormatter,formatValue,ColorValue,convertToHexCode,componentToHex,convertHexToColor,colorNameToHex,drawSymbol,renderLegendShape,isParentItem,TreeMapAjax,removeShape,removeLegend,setColor,removeSelectionWithHighlight,getLegendIndex,pushCollection,triggerDownload,removeElement,TreeMapLegend,LayoutPanel,TreeMapHighlight,TreeMapSelection,TreeMapTooltip,ImageExport,PdfExport,Print} from './public_api';\n\nexport {inputs as ɵa,outputs as ɵb} from './src/treemap/treemap.component';"]}