import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Injector, NgModule, Renderer2, ViewContainerRef } from '@angular/core';
import { ArrayBase, ComplexBase, ComponentBase, ComponentMixins, Template, setValue } from '@syncfusion/ej2-angular-base';
import { ImageExport, PdfExport, Print, TreeMap, TreeMapHighlight, TreeMapLegend, TreeMapSelection, TreeMapTooltip } from '@syncfusion/ej2-treemap';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';

const _c0 = ["headerTemplate"];
const _c1 = ["tooltipSettingsTemplate"];
const _c2 = ["leafItemSettingsLabelTemplate"];
let input = ['color', 'from', 'label', 'maxOpacity', 'minOpacity', 'showLegend', 'to', 'value'];
let outputs = [];
class ColorMappingDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
ColorMappingDirective.ɵfac = function ColorMappingDirective_Factory(t) { return new (t || ColorMappingDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ColorMappingDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ColorMappingDirective, selectors: [["e-colorMapping"]], inputs: { color: "color", from: "from", label: "label", maxOpacity: "maxOpacity", minOpacity: "minOpacity", showLegend: "showLegend", to: "to", value: "value" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ColorMappingDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
/**
 * ColorMapping Array Directive
 */
class ColorMappingsDirective extends ArrayBase {
    constructor() {
        super('colormapping');
    }
}
ColorMappingsDirective.ɵfac = function ColorMappingsDirective_Factory(t) { return new (t || ColorMappingsDirective)(); };
ColorMappingsDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ColorMappingsDirective, selectors: [["e-colorMappings"]], contentQueries: function ColorMappingsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ColorMappingDirective, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
ColorMappingsDirective.ctorParameters = () => [];

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let input$1 = ['autoFill', 'border', 'colorMapping', 'fill', 'groupGap', 'groupPadding', 'groupPath', 'headerAlignment', 'headerFormat', 'headerHeight', 'headerStyle', 'headerTemplate', 'opacity', 'showHeader', 'templatePosition'];
let outputs$1 = [];
/**
 * Level Directive
 * ```html
 * <e-levels>
 * <e-level></e-level>
 * </e-levels>
 * ```
 */
class LevelDirective extends ComplexBase {
    /**
     * @param {?} viewContainerRef
     */
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['colorMapping'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs$1);
        this.directivePropList = input$1;
    }
}
LevelDirective.ɵfac = function LevelDirective_Factory(t) { return new (t || LevelDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
LevelDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LevelDirective, selectors: [["e-level"]], contentQueries: function LevelDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ColorMappingsDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childColorMapping = _t.first);
    } }, inputs: { autoFill: "autoFill", border: "border", colorMapping: "colorMapping", fill: "fill", groupGap: "groupGap", groupPadding: "groupPadding", groupPath: "groupPath", headerAlignment: "headerAlignment", headerFormat: "headerFormat", headerHeight: "headerHeight", headerStyle: "headerStyle", headerTemplate: "headerTemplate", opacity: "opacity", showHeader: "showHeader", templatePosition: "templatePosition" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
LevelDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
LevelDirective.propDecorators = {
    'headerTemplate': [{ type: ContentChild, args: ['headerTemplate',] },],
};
__decorate([
    Template(),
    __metadata("design:type", Object)
], LevelDirective.prototype, "headerTemplate", void 0);
/**
 * Level Array Directive
 */
class LevelsDirective extends ArrayBase {
    constructor() {
        super('levels');
    }
}
LevelsDirective.ɵfac = function LevelsDirective_Factory(t) { return new (t || LevelsDirective)(); };
LevelsDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: LevelsDirective, selectors: [["e-levels"]], contentQueries: function LevelsDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, LevelDirective, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.children = _t);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/**
 * @nocollapse
 */
LevelsDirective.ctorParameters = () => [];

var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const inputs = ['allowImageExport', 'allowPdfExport', 'allowPrint', 'background', 'border', 'breadcrumbConnector', 'colorValuePath', 'dataSource', 'description', 'drillDownView', 'enableBreadcrumb', 'enableDrillDown', 'enablePersistence', 'enableRtl', 'equalColorValuePath', 'format', 'height', 'highlightSettings', 'initialDrillDown', 'layoutType', 'leafItemSettings', 'legendSettings', 'levels', 'locale', 'margin', 'palette', 'query', 'rangeColorValuePath', 'renderDirection', 'selectionSettings', 'tabIndex', 'theme', 'titleSettings', 'tooltipSettings', 'useGroupingSeparator', 'weightValuePath', 'width'];
const outputs$2 = ['beforePrint', 'click', 'doubleClick', 'drillEnd', 'drillStart', 'itemClick', 'itemHighlight', 'itemMove', 'itemRendering', 'itemSelected', 'legendItemRendering', 'legendRendering', 'load', 'loaded', 'mouseMove', 'resize', 'rightClick', 'tooltipRendering'];
const twoWays = [''];
/**
 * TreeMap Component
 * ```html
 * <ej-treemap></ej-treemap>
 * ```
 */
let TreeMapComponent = class TreeMapComponent extends TreeMap {
    /**
     * @param {?} ngEle
     * @param {?} srenderer
     * @param {?} viewContainerRef
     * @param {?} injector
     */
    constructor(ngEle, srenderer, viewContainerRef, injector) {
        super();
        this.ngEle = ngEle;
        this.srenderer = srenderer;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.tags = ['levels'];
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
        try {
            let mod = this.injector.get('TreeMapTreeMapTooltip');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_a) { }
        try {
            let mod = this.injector.get('TreeMapTreeMapLegend');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_b) { }
        try {
            let mod = this.injector.get('TreeMapTreeMapHighlight');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_c) { }
        try {
            let mod = this.injector.get('TreeMapTreeMapSelection');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_d) { }
        try {
            let mod = this.injector.get('TreeMapPrint');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_e) { }
        try {
            let mod = this.injector.get('TreeMapPdfExport');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_f) { }
        try {
            let mod = this.injector.get('TreeMapImageExport');
            if (this.injectedModules.indexOf(mod) === -1) {
                this.injectedModules.push(mod);
            }
        }
        catch (_g) { }
        this.registerEvents(outputs$2);
        this.addTwoWay.call(this, twoWays);
        setValue('currentInstance', this, this.viewContainerRef);
        this.context = new ComponentBase();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.context.ngOnInit(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.context.ngAfterViewInit(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.context.ngOnDestroy(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.tagObjects[0].instance = this.childLevels;
        this.context.ngAfterContentChecked(this);
    }
};
TreeMapComponent.ɵfac = function TreeMapComponent_Factory(t) { return new (t || TreeMapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
TreeMapComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TreeMapComponent, selectors: [["ejs-treemap"]], contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c2, 5);
        ɵngcc0.ɵɵcontentQuery(dirIndex, LevelsDirective, 5);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipSettings_template = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.leafItemSettings_labelTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childLevels = _t.first);
    } }, inputs: { allowImageExport: "allowImageExport", allowPdfExport: "allowPdfExport", allowPrint: "allowPrint", background: "background", border: "border", breadcrumbConnector: "breadcrumbConnector", colorValuePath: "colorValuePath", dataSource: "dataSource", description: "description", drillDownView: "drillDownView", enableBreadcrumb: "enableBreadcrumb", enableDrillDown: "enableDrillDown", enablePersistence: "enablePersistence", enableRtl: "enableRtl", equalColorValuePath: "equalColorValuePath", format: "format", height: "height", highlightSettings: "highlightSettings", initialDrillDown: "initialDrillDown", layoutType: "layoutType", leafItemSettings: "leafItemSettings", legendSettings: "legendSettings", levels: "levels", locale: "locale", margin: "margin", palette: "palette", query: "query", rangeColorValuePath: "rangeColorValuePath", renderDirection: "renderDirection", selectionSettings: "selectionSettings", tabIndex: "tabIndex", theme: "theme", titleSettings: "titleSettings", tooltipSettings: "tooltipSettings", useGroupingSeparator: "useGroupingSeparator", weightValuePath: "weightValuePath", width: "width" }, outputs: { beforePrint: "beforePrint", click: "click", doubleClick: "doubleClick", drillEnd: "drillEnd", drillStart: "drillStart", itemClick: "itemClick", itemHighlight: "itemHighlight", itemMove: "itemMove", itemRendering: "itemRendering", itemSelected: "itemSelected", legendItemRendering: "legendItemRendering", legendRendering: "legendRendering", load: "load", loaded: "loaded", mouseMove: "mouseMove", resize: "resize", rightClick: "rightClick", tooltipRendering: "tooltipRendering" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function TreeMapComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/**
 * @nocollapse
 */
TreeMapComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ViewContainerRef, },
    { type: Injector, },
];
TreeMapComponent.propDecorators = {
    'tooltipSettings_template': [{ type: ContentChild, args: ['tooltipSettingsTemplate',] },],
    'leafItemSettings_labelTemplate': [{ type: ContentChild, args: ['leafItemSettingsLabelTemplate',] },],
};
__decorate$1([
    Template(),
    __metadata$1("design:type", Object)
], TreeMapComponent.prototype, "tooltipSettings_template", void 0);
__decorate$1([
    Template(),
    __metadata$1("design:type", Object)
], TreeMapComponent.prototype, "leafItemSettings_labelTemplate", void 0);
TreeMapComponent = __decorate$1([
    ComponentMixins([ComponentBase]),
    __metadata$1("design:paramtypes", [ElementRef,
        Renderer2,
        ViewContainerRef,
        Injector])
], TreeMapComponent);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColorMappingDirective, [{
        type: Directive,
        args: [{
                selector: 'e-levels>e-colorMappings>e-colorMapping',
                inputs: input,
                outputs: outputs,
                queries: {}
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColorMappingsDirective, [{
        type: Directive,
        args: [{
                selector: 'e-levels>e-colorMappings',
                queries: {
                    children: new ContentChildren(ColorMappingDirective)
                }
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LevelDirective, [{
        type: Directive,
        args: [{
                selector: 'e-levels>e-level',
                inputs: input$1,
                outputs: outputs$1,
                queries: {
                    childColorMapping: new ContentChild(ColorMappingsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { headerTemplate: [{
            type: ContentChild,
            args: ['headerTemplate']
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LevelsDirective, [{
        type: Directive,
        args: [{
                selector: 'ej-treemap>e-levels',
                queries: {
                    children: new ContentChildren(LevelDirective)
                }
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeMapComponent, [{
        type: Component,
        args: [{
                selector: 'ejs-treemap',
                inputs: inputs,
                outputs: outputs$2,
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush,
                queries: {
                    childLevels: new ContentChild(LevelsDirective)
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }]; }, { tooltipSettings_template: [{
            type: ContentChild,
            args: ['tooltipSettingsTemplate']
        }], leafItemSettings_labelTemplate: [{
            type: ContentChild,
            args: ['leafItemSettingsLabelTemplate']
        }] }); })();

/**
 * NgModule definition for the TreeMap component.
 */
class TreeMapModule {
}
TreeMapModule.ɵfac = function TreeMapModule_Factory(t) { return new (t || TreeMapModule)(); };
TreeMapModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TreeMapModule });
TreeMapModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
/**
 * @nocollapse
 */
TreeMapModule.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeMapModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    TreeMapComponent,
                    ColorMappingDirective,
                    ColorMappingsDirective,
                    LevelDirective,
                    LevelsDirective
                ],
                exports: [
                    TreeMapComponent,
                    ColorMappingDirective,
                    ColorMappingsDirective,
                    LevelDirective,
                    LevelsDirective
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeMapModule, { declarations: function () { return [TreeMapComponent, ColorMappingDirective, ColorMappingsDirective, LevelDirective, LevelsDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [TreeMapComponent, ColorMappingDirective, ColorMappingsDirective, LevelDirective, LevelsDirective]; } }); })();

const TreeMapTooltipService = { provide: 'TreeMapTreeMapTooltip', useValue: TreeMapTooltip };
const TreeMapLegendService = { provide: 'TreeMapTreeMapLegend', useValue: TreeMapLegend };
const TreeMapHighlightService = { provide: 'TreeMapTreeMapHighlight', useValue: TreeMapHighlight };
const TreeMapSelectionService = { provide: 'TreeMapTreeMapSelection', useValue: TreeMapSelection };
const PrintService = { provide: 'TreeMapPrint', useValue: Print };
const PdfExportService = { provide: 'TreeMapPdfExport', useValue: PdfExport };
const ImageExportService = { provide: 'TreeMapImageExport', useValue: ImageExport };
/**
 * NgModule definition for the TreeMap component with providers.
 */
class TreeMapAllModule {
}
TreeMapAllModule.ɵfac = function TreeMapAllModule_Factory(t) { return new (t || TreeMapAllModule)(); };
TreeMapAllModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TreeMapAllModule });
TreeMapAllModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        TreeMapTooltipService,
        TreeMapLegendService,
        TreeMapHighlightService,
        TreeMapSelectionService,
        PrintService,
        PdfExportService,
        ImageExportService
    ], imports: [[CommonModule, TreeMapModule], TreeMapModule] });
/**
 * @nocollapse
 */
TreeMapAllModule.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeMapAllModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, TreeMapModule],
                exports: [
                    TreeMapModule
                ],
                providers: [
                    TreeMapTooltipService,
                    TreeMapLegendService,
                    TreeMapHighlightService,
                    TreeMapSelectionService,
                    PrintService,
                    PdfExportService,
                    ImageExportService
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeMapAllModule, { imports: function () { return [CommonModule, TreeMapModule]; }, exports: function () { return [TreeMapModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ColorMappingDirective, ColorMappingsDirective, LevelDirective, LevelsDirective, TreeMapComponent, TreeMapModule, TreeMapAllModule, TreeMapTooltipService, TreeMapLegendService, TreeMapHighlightService, TreeMapSelectionService, PrintService, PdfExportService, ImageExportService, inputs as ɵa, outputs$2 as ɵb };
export { TreeMap, LevelsData, Border, Margin, Font, CommonTitleSettings, SubTitleSettings, TitleSettings, ColorMapping, LegendSettings, InitialDrillSettings, LeafItemSettings, TooltipSettings, SelectionSettings, HighlightSettings, LevelSettings, load, loaded, beforePrint, itemRendering, drillStart, drillEnd, itemSelected, itemHighlight, tooltipRendering, itemClick, itemMove, click, doubleClick, rightClick, mouseMove, legendItemRendering, legendRendering, resize, defaultFont, Theme, getThemeStyle, Size, stringToNumber, Rect, RectOption, PathOption, measureText, TextOption, textTrim, Location, findPosition, createTextStyle, renderTextElement, setItemTemplateContent, getElement, itemsToOrder, isContainsData, findChildren, findHightLightItems, getTemplateFunction, convertElement, findLabelLocation, measureElement, getArea, getShortestEdge, convertToContainer, convertToRect, getMousePosition, colorMap, deSaturationColor, colorCollections, rgbToHex, getColorByValue, getGradientColor, getPercentageColor, getPercentage, wordWrap, textWrap, hide, orderByArea, maintainSelection, legendMaintain, removeClassNames, applyOptions, textFormatter, formatValue, ColorValue, convertToHexCode, componentToHex, convertHexToColor, colorNameToHex, drawSymbol, renderLegendShape, isParentItem, TreeMapAjax, removeShape, removeLegend, setColor, removeSelectionWithHighlight, getLegendIndex, pushCollection, triggerDownload, removeElement, TreeMapLegend, LayoutPanel, TreeMapHighlight, TreeMapSelection, TreeMapTooltip, ImageExport, PdfExport, Print } from '@syncfusion/ej2-treemap';

//# sourceMappingURL=ej2-angular-treemap.js.map