{"version":3,"file":"ej2-angular-treemap.umd.min.js","sources":["~/@syncfusion/ej2-angular-treemap/src/treemap/colormapping.directive.ts","~/@syncfusion/ej2-angular-treemap/src/treemap/levels.directive.ts","~/@syncfusion/ej2-angular-treemap/src/treemap/treemap.component.ts","~/@syncfusion/ej2-angular-treemap/src/treemap/treemap.module.ts","~/@syncfusion/ej2-angular-treemap/src/treemap/treemap-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\n\n\nlet /** @type {?} */ input: string[] = ['color', 'from', 'label', 'maxOpacity', 'minOpacity', 'showLegend', 'to', 'value'];\nlet /** @type {?} */ outputs: string[] = [];\nexport class ColorMappingDirective extends ComplexBase<ColorMappingDirective> {\npublic directivePropList: any;\n/**\n * Sets and gets the color for the color-mapping in treemap.\n * \\@default null\n */\npublic color: any;\n/**\n * Sets and gets the value from which the range of color mapping starts.\n * \\@default null\n */\npublic from: any;\n/**\n * Sets and gets the label text for the legend based on color mapping.\n * \\@default null\n */\npublic label: any;\n/**\n * Sets and gets the maximum opacity for the color-mapping in the treemap component.\n * \\@default null\n */\npublic maxOpacity: any;\n/**\n * Sets and gets the minimum opacity for the color-mapping in the treemap component.\n * \\@default null\n */\npublic minOpacity: any;\n/**\n * Enables or disables the visibility of the legend for color mapping in the treemap component.\n * \\@default true\n */\npublic showLegend: any;\n/**\n * Sets and gets the value to which the range of color mapping ends.\n * \\@default null\n */\npublic to: any;\n/**\n * Sets and gets the value for the color-mapping from the data source.\n * \\@default null\n */\npublic value: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-levels>e-colorMappings>e-colorMapping',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction ColorMappingDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColorMappingDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColorMappingDirective.ctorParameters;\n/** @type {?} */\nColorMappingDirective.prototype.directivePropList;\n/**\n * Sets and gets the color for the color-mapping in treemap.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.color;\n/**\n * Sets and gets the value from which the range of color mapping starts.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.from;\n/**\n * Sets and gets the label text for the legend based on color mapping.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.label;\n/**\n * Sets and gets the maximum opacity for the color-mapping in the treemap component.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.maxOpacity;\n/**\n * Sets and gets the minimum opacity for the color-mapping in the treemap component.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.minOpacity;\n/**\n * Enables or disables the visibility of the legend for color mapping in the treemap component.\n * \\@default true\n * @type {?}\n */\nColorMappingDirective.prototype.showLegend;\n/**\n * Sets and gets the value to which the range of color mapping ends.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.to;\n/**\n * Sets and gets the value for the color-mapping from the data source.\n * \\@default null\n * @type {?}\n */\nColorMappingDirective.prototype.value;\n/** @type {?} */\nColorMappingDirective.prototype.viewContainerRef;\n}\n\n/**\n * ColorMapping Array Directive\n */\nexport class ColorMappingsDirective extends ArrayBase<ColorMappingsDirective> {\nconstructor() {\n        super('colormapping');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-levels>e-colorMappings',\n    queries: {\n        children: new ContentChildren(ColorMappingDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ColorMappingsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColorMappingsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColorMappingsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { ColorMappingsDirective } from './colormapping.directive';\n\nlet /** @type {?} */ input: string[] = ['autoFill', 'border', 'colorMapping', 'fill', 'groupGap', 'groupPadding', 'groupPath', 'headerAlignment', 'headerFormat', 'headerHeight', 'headerStyle', 'headerTemplate', 'opacity', 'showHeader', 'templatePosition'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * Level Directive\n * ```html\n * <e-levels>\n * <e-level></e-level>\n * </e-levels>\n * ```\n */\nexport class LevelDirective extends ComplexBase<LevelDirective> {\npublic directivePropList: any;\npublic childColorMapping: any;\npublic tags: string[] = ['colorMapping'];\n/**\n * Enables or disables the automatic filling of the colors in the items in the treemap component.\n * \\@default false\n */\npublic autoFill: any;\n/**\n * Sets and gets the options for customizing the color and width of the border of \n * the levels of the treemap component.\n */\npublic border: any;\n/**\n * Sets and gets the options for customizing the color-mapping in the treemap component.\n */\npublic colorMapping: any;\n/**\n * Sets and gets the fill color of the level in the treemap component.\n * \\@default null\n */\npublic fill: any;\n/**\n * Sets and gets the gap between the levels in the treemap component.\n * \\@default 0\n */\npublic groupGap: any;\n/**\n * Sets and gets the padding of levels in the treemap component.\n * \\@default 10\n */\npublic groupPadding: any;\n/**\n * Sets and gets the value path from the data source in the treemap component to render the item.\n * \\@default null\n */\npublic groupPath: any;\n/**\n * Sets and gets the alignment of the header of the treemap component.\n * \\@default 'Near'\n */\npublic headerAlignment: any;\n/**\n * Sets and gets the format of header of the levels in the treemap component.\n * \\@default null\n */\npublic headerFormat: any;\n/**\n * Sets and gets the height of header in the treemap component.\n * \\@default 20\n */\npublic headerHeight: any;\n/**\n * Sets and gets the options for customizing the style of header of the treemap component.\n */\npublic headerStyle: any;\n/**\n * Sets and gets the opacity in the treemap component.\n * \\@default 1\n */\npublic opacity: any;\n/**\n * Shows or hides the header in level of the treemap component.\n * \\@default true\n */\npublic showHeader: any;\n/**\n * Sets and gets the options for customizing the template position of the treemap component.\n * \\@default 'TopLeft'\n */\npublic templatePosition: any;\n/**\n * Sets and gets the template for header in the treemap component.\n * \\@default null\n */\n@Template()\n    public headerTemplate: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'e-levels>e-level',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childColorMapping: new ContentChild(ColorMappingsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'headerTemplate': [{ type: ContentChild, args: ['headerTemplate', ] },],\n};\n}\n\nfunction LevelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLevelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLevelDirective.ctorParameters;\n/** @type {?} */\nLevelDirective.propDecorators;\n/** @type {?} */\nLevelDirective.prototype.directivePropList;\n/** @type {?} */\nLevelDirective.prototype.childColorMapping;\n/** @type {?} */\nLevelDirective.prototype.tags;\n/**\n * Enables or disables the automatic filling of the colors in the items in the treemap component.\n * \\@default false\n * @type {?}\n */\nLevelDirective.prototype.autoFill;\n/**\n * Sets and gets the options for customizing the color and width of the border of \n * the levels of the treemap component.\n * @type {?}\n */\nLevelDirective.prototype.border;\n/**\n * Sets and gets the options for customizing the color-mapping in the treemap component.\n * @type {?}\n */\nLevelDirective.prototype.colorMapping;\n/**\n * Sets and gets the fill color of the level in the treemap component.\n * \\@default null\n * @type {?}\n */\nLevelDirective.prototype.fill;\n/**\n * Sets and gets the gap between the levels in the treemap component.\n * \\@default 0\n * @type {?}\n */\nLevelDirective.prototype.groupGap;\n/**\n * Sets and gets the padding of levels in the treemap component.\n * \\@default 10\n * @type {?}\n */\nLevelDirective.prototype.groupPadding;\n/**\n * Sets and gets the value path from the data source in the treemap component to render the item.\n * \\@default null\n * @type {?}\n */\nLevelDirective.prototype.groupPath;\n/**\n * Sets and gets the alignment of the header of the treemap component.\n * \\@default 'Near'\n * @type {?}\n */\nLevelDirective.prototype.headerAlignment;\n/**\n * Sets and gets the format of header of the levels in the treemap component.\n * \\@default null\n * @type {?}\n */\nLevelDirective.prototype.headerFormat;\n/**\n * Sets and gets the height of header in the treemap component.\n * \\@default 20\n * @type {?}\n */\nLevelDirective.prototype.headerHeight;\n/**\n * Sets and gets the options for customizing the style of header of the treemap component.\n * @type {?}\n */\nLevelDirective.prototype.headerStyle;\n/**\n * Sets and gets the opacity in the treemap component.\n * \\@default 1\n * @type {?}\n */\nLevelDirective.prototype.opacity;\n/**\n * Shows or hides the header in level of the treemap component.\n * \\@default true\n * @type {?}\n */\nLevelDirective.prototype.showHeader;\n/**\n * Sets and gets the options for customizing the template position of the treemap component.\n * \\@default 'TopLeft'\n * @type {?}\n */\nLevelDirective.prototype.templatePosition;\n/**\n * Sets and gets the template for header in the treemap component.\n * \\@default null\n * @type {?}\n */\nLevelDirective.prototype.headerTemplate;\n/** @type {?} */\nLevelDirective.prototype.viewContainerRef;\n}\n\n/**\n * Level Array Directive\n */\nexport class LevelsDirective extends ArrayBase<LevelsDirective> {\nconstructor() {\n        super('levels');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ej-treemap>e-levels',\n    queries: {\n        children: new ContentChildren(LevelDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LevelsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nLevelsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLevelsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { TreeMap } from '@syncfusion/ej2-treemap';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { LevelsDirective } from './levels.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['allowImageExport','allowPdfExport','allowPrint','background','border','breadcrumbConnector','colorValuePath','dataSource','description','drillDownView','enableBreadcrumb','enableDrillDown','enablePersistence','enableRtl','equalColorValuePath','format','height','highlightSettings','initialDrillDown','layoutType','leafItemSettings','legendSettings','levels','locale','margin','palette','query','rangeColorValuePath','renderDirection','selectionSettings','tabIndex','theme','titleSettings','tooltipSettings','useGroupingSeparator','weightValuePath','width'];\nexport const /** @type {?} */ outputs: string[] = ['beforePrint','click','doubleClick','drillEnd','drillStart','itemClick','itemHighlight','itemMove','itemRendering','itemSelected','legendItemRendering','legendRendering','load','loaded','mouseMove','resize','rightClick','tooltipRendering'];\nexport const /** @type {?} */ twoWays: string[] = [''];\n/**\n * TreeMap Component\n * ```html\n * <ej-treemap></ej-treemap>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class TreeMapComponent extends TreeMap implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\n\tbeforePrint: any;\n\tclick: any;\n\tdoubleClick: any;\n\tdrillEnd: any;\n\tdrillStart: any;\n\titemClick: any;\n\titemHighlight: any;\n\titemMove: any;\n\titemRendering: any;\n\titemSelected: any;\n\tlegendItemRendering: any;\n\tlegendRendering: any;\n\tload: any;\n\tloaded: any;\n\tmouseMove: any;\n\tresize: any;\n\trightClick: any;\npublic tooltipRendering: any;\npublic childLevels: QueryList<LevelsDirective>;\npublic tags: string[] = ['levels'];\n    \n    @Template()\npublic tooltipSettings_template: any;\n    \n    @Template()\npublic leafItemSettings_labelTemplate: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('TreeMapTreeMapTooltip');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapTreeMapLegend');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapTreeMapHighlight');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapTreeMapSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapPrint');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapPdfExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('TreeMapImageExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childLevels;\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-treemap',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childLevels: new ContentChild(LevelsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tooltipSettings_template': [{ type: ContentChild, args: ['tooltipSettingsTemplate', ] },],\n'leafItemSettings_labelTemplate': [{ type: ContentChild, args: ['leafItemSettingsLabelTemplate', ] },],\n};\n}\n\nfunction TreeMapComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeMapComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTreeMapComponent.ctorParameters;\n/** @type {?} */\nTreeMapComponent.propDecorators;\n/** @type {?} */\nTreeMapComponent.prototype.context;\n/** @type {?} */\nTreeMapComponent.prototype.tagObjects;\n/** @type {?} */\nTreeMapComponent.prototype.beforePrint;\n/** @type {?} */\nTreeMapComponent.prototype.click;\n/** @type {?} */\nTreeMapComponent.prototype.doubleClick;\n/** @type {?} */\nTreeMapComponent.prototype.drillEnd;\n/** @type {?} */\nTreeMapComponent.prototype.drillStart;\n/** @type {?} */\nTreeMapComponent.prototype.itemClick;\n/** @type {?} */\nTreeMapComponent.prototype.itemHighlight;\n/** @type {?} */\nTreeMapComponent.prototype.itemMove;\n/** @type {?} */\nTreeMapComponent.prototype.itemRendering;\n/** @type {?} */\nTreeMapComponent.prototype.itemSelected;\n/** @type {?} */\nTreeMapComponent.prototype.legendItemRendering;\n/** @type {?} */\nTreeMapComponent.prototype.legendRendering;\n/** @type {?} */\nTreeMapComponent.prototype.load;\n/** @type {?} */\nTreeMapComponent.prototype.loaded;\n/** @type {?} */\nTreeMapComponent.prototype.mouseMove;\n/** @type {?} */\nTreeMapComponent.prototype.resize;\n/** @type {?} */\nTreeMapComponent.prototype.rightClick;\n/** @type {?} */\nTreeMapComponent.prototype.tooltipRendering;\n/** @type {?} */\nTreeMapComponent.prototype.childLevels;\n/** @type {?} */\nTreeMapComponent.prototype.tags;\n/** @type {?} */\nTreeMapComponent.prototype.tooltipSettings_template;\n/** @type {?} */\nTreeMapComponent.prototype.leafItemSettings_labelTemplate;\n/** @type {?} */\nTreeMapComponent.prototype.registerEvents;\n/** @type {?} */\nTreeMapComponent.prototype.addTwoWay;\n/** @type {?} */\nTreeMapComponent.prototype.ngEle;\n/** @type {?} */\nTreeMapComponent.prototype.srenderer;\n/** @type {?} */\nTreeMapComponent.prototype.viewContainerRef;\n/** @type {?} */\nTreeMapComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColorMappingDirective, ColorMappingsDirective } from './colormapping.directive';\nimport { LevelDirective, LevelsDirective } from './levels.directive';\nimport { TreeMapComponent } from './treemap.component';\n/**\n * NgModule definition for the TreeMap component.\n */\nexport class TreeMapModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        TreeMapComponent,\n        ColorMappingDirective,\n        ColorMappingsDirective,\n        LevelDirective,\n        LevelsDirective\n    ],\n    exports: [\n        TreeMapComponent,\n        ColorMappingDirective,\n        ColorMappingsDirective,\n        LevelDirective,\n        LevelsDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TreeMapModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeMapModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTreeMapModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColorMappingDirective, ColorMappingsDirective } from './colormapping.directive';\nimport { LevelDirective, LevelsDirective } from './levels.directive';\nimport { TreeMapComponent } from './treemap.component';\nimport { TreeMapModule } from './treemap.module';\nimport {TreeMapTooltip, TreeMapLegend, TreeMapHighlight, TreeMapSelection, Print, PdfExport, ImageExport} from '@syncfusion/ej2-treemap';\n\n\nexport const /** @type {?} */ TreeMapTooltipService: ValueProvider = { provide: 'TreeMapTreeMapTooltip', useValue: TreeMapTooltip};\nexport const /** @type {?} */ TreeMapLegendService: ValueProvider = { provide: 'TreeMapTreeMapLegend', useValue: TreeMapLegend};\nexport const /** @type {?} */ TreeMapHighlightService: ValueProvider = { provide: 'TreeMapTreeMapHighlight', useValue: TreeMapHighlight};\nexport const /** @type {?} */ TreeMapSelectionService: ValueProvider = { provide: 'TreeMapTreeMapSelection', useValue: TreeMapSelection};\nexport const /** @type {?} */ PrintService: ValueProvider = { provide: 'TreeMapPrint', useValue: Print};\nexport const /** @type {?} */ PdfExportService: ValueProvider = { provide: 'TreeMapPdfExport', useValue: PdfExport};\nexport const /** @type {?} */ ImageExportService: ValueProvider = { provide: 'TreeMapImageExport', useValue: ImageExport};\n/**\n * NgModule definition for the TreeMap component with providers.\n */\nexport class TreeMapAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, TreeMapModule],\n    exports: [\n        TreeMapModule\n    ],\n    providers:[\n        TreeMapTooltipService,\n        TreeMapLegendService,\n        TreeMapHighlightService,\n        TreeMapSelectionService,\n        PrintService,\n        PdfExportService,\n        ImageExportService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TreeMapAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTreeMapAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTreeMapAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["input","outputs","ColorMappingDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","directivePropList","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","ColorMappingsDirective","ArrayBase","children","ContentChildren","LevelDirective","tags","childColorMapping","ContentChild","propDecorators","headerTemplate","__decorate","Template","prototype","LevelsDirective","twoWays","exports","TreeMapComponent","ngEle","srenderer","injector","element","nativeElement","injectedModules","mod","get","indexOf","push","_a","_b","_c","_d","_e","_f","_g","addTwoWay","context","ComponentBase","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","tagObjects","instance","childLevels","TreeMap","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","Injector","tooltipSettings_template","leafItemSettings_labelTemplate","ComponentMixins","__metadata","TreeMapModule","NgModule","imports","CommonModule","declarations","TreeMapTooltipService","provide","useValue","TreeMapTooltip","TreeMapLegendService","TreeMapLegend","TreeMapHighlightService","TreeMapHighlight","TreeMapSelectionService","TreeMapSelection","PrintService","Print","PdfExportService","PdfExport","ImageExportService","ImageExport","TreeMapAllModule","providers"],"mappings":"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"}
