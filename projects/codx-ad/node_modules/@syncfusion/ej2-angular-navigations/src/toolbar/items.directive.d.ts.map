{"version":3,"file":"items.directive.d.ts","sources":["items.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ViewContainerRef } from '@angular/core';\nimport { ComplexBase, ArrayBase } from '@syncfusion/ej2-angular-base';\n/**\n * 'e-item' directive represent a item of the Angular Toolbar.\n * It must be contained in a Toolbar component(`ejs-toolbar`).\n * ```html\n * <ejs-toolbar>\n *   <e-items>\n *    <e-item text='Cut'></e-item>\n *    <e-item text='Copy'></e-item>\n *   </e-items>\n * </ejs-toolbar>\n * ```\n */\nexport declare class ItemDirective extends ComplexBase<ItemDirective> {\n    private viewContainerRef;\n    directivePropList: any;\n    click: any;\n    /**\n     * Specifies the types of command to be rendered in the Toolbar.\n     * Supported types are:\n     * - Button: Creates the Button control with its given properties like text, prefixIcon, etc.\n     * - Separator: Adds a horizontal line that separates the Toolbar commands.\n     * - Input: Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList,\n     * AutoComplete, etc.\n     * @default 'Button'\n     */\n    type: any;\n    /**\n     * Specifies the location for aligning Toolbar items on the Toolbar. Each command will be aligned according to the `align` property.\n     * Possible values are:\n     * - Left: To align commands to the left side of the Toolbar.\n     * - Center: To align commands at the center of the Toolbar.\n     * - Right: To align commands to the right side of the Toolbar.\n     *\n     * @default \"Left\"\n     */\n    align: any;\n    /**\n     * Defines single/multiple classes (separated by space) to be used for customization of commands.\n     * @default \"\"\n     */\n    cssClass: any;\n    /**\n     * Specifies whether an item should be disabled or not.\n     * @default false\n     */\n    disabled: any;\n    /**\n     * Defines htmlAttributes used to add custom attributes to Toolbar command.\n     * Supports HTML attributes such as style, class, etc.\n     * @default null\n     */\n    htmlAttributes: any;\n    /**\n     * Specifies the unique ID to be used with button or input element of Toolbar items.\n     * @default \"\"\n     */\n    id: any;\n    /**\n     * Specifies the Toolbar command display area when an element's content is too large to fit available space.\n     * This is applicable only to `popup` mode. Possible values are:\n     * - Show:  Always shows the item as the primary priority on the *Toolbar*.\n     * - Hide: Always shows the item as the secondary priority on the *popup*.\n     * - None: No priority for display, and as per normal order moves to popup when content exceeds.\n     * @default 'None'\n     */\n    overflow: any;\n    /**\n     * Defines single/multiple classes separated by space used to specify an icon for the button.\n     * The icon will be positioned before the text content if text is available, otherwise the icon alone will be rendered.\n     * @default \"\"\n     */\n    prefixIcon: any;\n    /**\n     * Defines the priority of items to display it in popup always.\n     * It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.\n     * @default false\n     */\n    showAlwaysInPopup: any;\n    /**\n     * Specifies where the button text will be displayed on *popup mode* of the Toolbar.\n     * Possible values are:\n     * - Toolbar:  Text will be displayed on *Toolbar* only.\n     * - Overflow: Text will be displayed only when content overflows to *popup*.\n     * - Both: Text will be displayed on *popup* and *Toolbar*.\n     * @default 'Both'\n     */\n    showTextOn: any;\n    /**\n     * Defines single/multiple classes separated by space used to specify an icon for the button.\n     * The icon will be positioned after the text content if text is available.\n     * @default \"\"\n     */\n    suffixIcon: any;\n    /**\n     * Specifies the text to be displayed on the Toolbar button.\n     * @default \"\"\n     */\n    text: any;\n    /**\n     * Specifies the text to be displayed on hovering the Toolbar button.\n     * @default \"\"\n     */\n    tooltipText: any;\n    /**\n     * Specifies whether an item should be hidden or not.\n     * @default true\n     */\n    visible: any;\n    /**\n     * Specifies the width of the Toolbar button commands.\n     * @default 'auto'\n     */\n    width: any;\n    /**\n     * Specifies the HTML element/element ID as a string that can be added as a Toolbar command.\n     *\n     * @default \"\"\n     */\n    template: any;\n    constructor(viewContainerRef: ViewContainerRef);\n}\n/**\n * Item Array Directive\n * @private\n */\nexport declare class ItemsDirective extends ArrayBase<ItemsDirective> {\n    constructor();\n}\n"]}