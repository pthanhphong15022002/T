{"version":3,"file":"ej2-angular-grids.umd.min.js","sources":["~/@syncfusion/ej2-angular-grids/src/grid/stacked-column.directive.ts","~/@syncfusion/ej2-angular-grids/src/grid/columns.directive.ts","~/@syncfusion/ej2-angular-grids/src/grid/aggregate-columns.directive.ts","~/@syncfusion/ej2-angular-grids/src/grid/aggregates.directive.ts","~/@syncfusion/ej2-angular-grids/src/grid/grid.component.ts","~/@syncfusion/ej2-angular-grids/src/grid/grid.module.ts","~/@syncfusion/ej2-angular-grids/src/grid/grid-all.module.ts","~/@syncfusion/ej2-angular-grids/src/pager/pager.component.ts","~/@syncfusion/ej2-angular-grids/src/pager/pager.module.ts","~/@syncfusion/ej2-angular-grids/src/pager/pager-all.module.ts"],"sourcesContent":["import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['allowEditing', 'allowFiltering', 'allowGrouping', 'allowReordering', 'allowResizing', 'allowSearching', 'allowSorting', 'autoFit', 'clipMode', 'columns', 'commands', 'customAttributes', 'dataSource', 'defaultValue', 'disableHtmlEncode', 'displayAsCheckBox', 'edit', 'editTemplate', 'editType', 'enableGroupByFormat', 'field', 'filter', 'filterBarTemplate', 'filterTemplate', 'foreignKeyField', 'foreignKeyValue', 'format', 'formatter', 'freeze', 'headerTemplate', 'headerText', 'headerTextAlign', 'headerValueAccessor', 'hideAtMedia', 'index', 'isFrozen', 'isIdentity', 'isPrimaryKey', 'lockColumn', 'maxWidth', 'minWidth', 'showColumnMenu', 'showInColumnChooser', 'sortComparer', 'template', 'textAlign', 'type', 'uid', 'validationRules', 'valueAccessor', 'visible', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-stacked-column` directive represent the stacked column of the Angular Grid.\n * It must be contained in a StackedColumns component(`e-stacked-columns`). \n * ```html\n * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'> \n *   <e-columns>\n *     <e-column field='ID' width='100'></e-column>\n *     <e-column headerText='Details' width='100'>\n *       <e-stacked-columns>\n *         <e-stacked-column field='Name' width='140'></e-stacked-column>\n *       </e-stacked-columns>\n *     </e-column>\n *   </e-columns>\n * </ejs-grid>\n * ```\n */\nexport class StackedColumnDirective extends ComplexBase<StackedColumnDirective> {\npublic directivePropList: any;\n/**\n * Defines the data type of the column.\n * \\@default null\n */\npublic type: any;\n/**\n * If `allowEditing` set to false, then it disables editing of a particular column. \n * By default all columns are editable.\n * \\@default true\n */\npublic allowEditing: any;\n/**\n * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column. \n * By default all columns are filterable.\n * \\@default true\n */\npublic allowFiltering: any;\n/**\n * If `allowGrouping` set to false, then it disables grouping of a particular column. \n * By default all columns are groupable.\n * \\@default true\n */\npublic allowGrouping: any;\n/**\n * If `allowReordering` set to false, then it disables reorder of a particular column. \n * By default all columns can be reorder.\n * \\@default true\n */\npublic allowReordering: any;\n/**\n * If `allowResizing` set to false, it disables resize option of a particular column.\n * \\@default true\n */\npublic allowResizing: any;\n/**\n * If `allowSearching` set to false, then it disables Searching of a particular column. \n * By default all columns allow Searching.\n * \\@default true\n */\npublic allowSearching: any;\n/**\n * If `allowSorting` set to false, then it disables sorting option of a particular column. \n * By default all columns are sortable.\n * \\@default true\n */\npublic allowSorting: any;\n/**\n * If `autoFit` set to true, then the particular column content width will be \n * adjusted based on its content in the initial rendering itself. \n * Setting this property as true is equivalent to calling `autoFitColumns` method in the `dataBound` event.\n * \\@default false\n */\npublic autoFit: any;\n/**\n * Defines the cell content's overflow mode. The available modes are \n * * `Clip` -  Truncates the cell content when it overflows its area. \n * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area. \n * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area \n * also it will display tooltip while hover on ellipsis applied cell.\n * \\@default Ellipsis\n */\npublic clipMode: any;\n/**\n * Used to render multiple header rows(stacked headers) on the Grid header.\n * \\@default null\n */\npublic columns: any;\n/**\n * `commands` provides an option to display command buttons in every cell. \n * The available built-in command buttons are \n * * Edit - Edit the record. \n * * Delete - Delete the record. \n * * Save - Save the record. \n * * Cancel - Cancel the edit state.\n * \n * The following code example implements the custom command column.\n * ```html\n * <style type=\"text/css\" class=\"cssStyles\">\n * .details-icon:before\n * {\n *   content:\"\\e74d\";\n * }\n * </style>\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * var gridObj = new Grid({\n * datasource: window.gridData,\n * columns : [\n * { field: 'CustomerID', headerText: 'Customer ID' },\n * { field: 'CustomerName', headerText: 'Customer Name' },\n * {commands: [{buttonOption:{content: 'Details', click: onClick, cssClass: details-icon}}], headerText: 'Customer Details'}\n * ]\n * gridObj.appendTo(\"#Grid\");\n * ```\n *     \n * \\@default null\n */\npublic commands: any;\n/**\n * The CSS styles and attributes of the content cells of a particular column can be customized.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: filterData,\n * columns: [\n *   { field: 'OrderID', headerText: 'Order ID' },\n *   {\n *       field: 'EmployeeID', headerText: 'Employee ID', customAttributes: {\n *          class: 'employeeid',\n *          type: 'employee-id-cell'\n *     }\n *  }]\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n */\npublic customAttributes: any;\n/**\n * Defines the column data source  which will act as foreign data source.\n * \\@default null\n */\npublic dataSource: any;\n/**\n * Defines default values for the component when adding a new record to the Grid.\n * \\@default null\n * \\@asptype object\n */\npublic defaultValue: any;\n/**\n * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.\n * \\@default true\n */\npublic disableHtmlEncode: any;\n/**\n * If `displayAsCheckBox` is set to true, it displays the column value as a check box instead of Boolean value.\n * \\@default false\n */\npublic displayAsCheckBox: any;\n/**\n * Defines the `IEditCell`(../../grid/edit/#cell-edit-template) object to customize default edit cell.\n * \\@default {}\n */\npublic edit: any;\n/**\n * Defines the type of component for editing.\n * \\@default 'stringedit'\n */\npublic editType: any;\n/**\n * If `enableGroupByFormat` set to true, then it groups the particular column by formatted values. \n * By default no columns are group by format.\n * \\@default true\n */\npublic enableGroupByFormat: any;\n/**\n * Defines the field name of column which is mapped with mapping name of DataSource. \n * The bounded columns can be sort, filter and group etc., \n * If the `field` name contains “dot”, then it is considered as complex binding. \n * The `field` name must be a valid JavaScript identifier, \n * the first character must be an alphabet and should not contain spaces and special characters.\n * \\@default ''\n */\npublic field: any;\n/**\n *  Defines the filter options to customize filtering for the particular column.\n * \n *  \\@default null\n * \n */\npublic filter: any;\n/**\n * The `filterBarTemplate` is used to add a custom component instead of default input component for filter bar. \n * It have create and read functions. \n * * create: It is used for creating custom components. \n * * read: It is used to perform custom filter action.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: filterData,\n * columns: [\n *  { field: 'OrderID', headerText: 'Order ID' },\n *  {\n *     field: 'EmployeeID', filterBarTemplate: {\n *        create: (args: { element: Element, column: Column }) => {\n *             let input: HTMLInputElement = document.createElement('input');\n *             input.id = 'EmployeeID';\n *             input.type = 'text';\n *             return input;\n *        },\n *        write: (args: { element: Element, column: Column }) => {\n *            args.element.addEventListener('input', args.column.filterBarTemplate.read as EventListener);\n *        },\n *        read: (args: { element: HTMLInputElement, columnIndex: number, column: Column }) => {\n *            gridObj.filterByColumn(args.element.id, 'equal', args.element.value);\n *       }\n *    }\n * }],\n *  allowFiltering: true\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n */\npublic filterBarTemplate: any;\n/**\n * Defines the mapping column name of the foreign data source. \n * If it is not defined then the `columns.field` will be considered as mapping column name\n * \\@default null\n */\npublic foreignKeyField: any;\n/**\n * Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data\n * \\@default null\n */\npublic foreignKeyValue: any;\n/**\n * It is used to change display value with the given format and does not affect the original data. \n * Gets the format from the user which can be standard or custom \n * [`number`](../../common/internationalization/#manipulating-numbers) \n * and [`date`](../../common/internationalization/#manipulating-datetime) formats.\n * \\@default null\n * \\@asptype string\n */\npublic format: any;\n/**\n * Defines the method which is used to achieve custom formatting from an external function. \n * This function triggers before rendering of each cell.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * class ExtendedFormatter implements ICellFormatter {\n * public getValue(column: Column, data: Object): Object {\n *  return '<span style=\"color:' + (data['Verified'] ? 'green' : 'red') + '\"><i>' + data['Verified'] + '</i><span>';\n * }\n * }\n * let gridObj: Grid = new Grid({\n *    dataSource: filterData,\n *    columns: [\n *        { field: 'ShipName', headerText: 'Ship Name' },\n *        { field: 'Verified', headerText: 'Verified Status', formatter: ExtendedFormatter }]\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n */\npublic formatter: any;\n/**\n * defines which side the column need to freeze \n * The available built-in freeze directions are \n * * Left - Freeze the column at left side. \n * * Right - Freeze the column at right side.\n * \\@default null\n */\npublic freeze: any;\n/**\n * Defines the header text of column which is used to display in column header. \n * If `headerText` is not defined, then field name value will be assigned to header text.\n * \\@default null\n */\npublic headerText: any;\n/**\n * Define the alignment of column header which is used to align the text of column header.\n * \\@aspdefaultvalueignore\n * \\@default null\n */\npublic headerTextAlign: any;\n/**\n * Defines the method used to apply custom header cell values from external function and display this on each cell rendered.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],\n * columns: [\n *    { field: 'EmployeeID', headerText: 'Employee ID' },\n *    { field: 'EmployeeName', headerText: 'Employee First Name',\n *      headerValueAccessor: (field: string,column: Column) => {\n *            return \"newheadername\";\n *        },\n *    }]\n * });\n * ```\n *     \n * \\@default null\n */\npublic headerValueAccessor: any;\n/**\n * column visibility can change based on its [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html). \n * `hideAtMedia` accepts only valid Media Queries.\n * \\@default ''\n */\npublic hideAtMedia: any;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default null\n */\npublic index: any;\n/**\n * You can use this property to freeze selected columns in grid.\n * \\@default false\n */\npublic isFrozen: any;\n/**\n * If `isIdentity` is set to true, then this column is considered as identity column.\n * \\@default false\n */\npublic isIdentity: any;\n/**\n * If `isPrimaryKey` is set to true, considers this column as the primary key constraint.\n * \\@default false\n */\npublic isPrimaryKey: any;\n/**\n * Defines the mapping column name of the foreign data source. \n * If it is not defined then the `columns.field` will be considered as mapping column name\n * \\@default false\n */\npublic lockColumn: any;\n/**\n * Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n * \\@default ''\n */\npublic maxWidth: any;\n/**\n * Defines the minimum width of the column in pixels or percentage.\n * \\@default ''\n */\npublic minWidth: any;\n/**\n * If `showColumnMenu` set to false, then it disable the column menu of a particular column. \n * By default column menu will show for all columns\n * \\@default true\n */\npublic showColumnMenu: any;\n/**\n * If `showInColumnChooser` set to false, then hides the particular column in column chooser. \n * By default all columns are displayed in column Chooser.\n * \\@default true\n */\npublic showInColumnChooser: any;\n/**\n * It defines the custom sort comparer function.\n */\npublic sortComparer: any;\n/**\n * Defines the alignment of the column in both header and content cells.\n * \\@default Left\n */\npublic textAlign: any;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default ''\n */\npublic uid: any;\n/**\n * `editType`(../../grid/edit/#cell-edit-type-and-its-params) Defines rules to validate data before creating and updating.\n * \\@default null\n */\npublic validationRules: any;\n/**\n * Defines the method used to apply custom cell values from external function and display this on each cell rendered.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],\n * columns: [\n *    { field: 'EmployeeID', headerText: 'Employee ID' },\n *    { field: 'EmployeeName', headerText: 'Employee First Name',\n *      valueAccessor: (field: string, data: Object, column: Column) => {\n *            return data['EmployeeName'][0];\n *        },\n *    }]\n * });\n * ```\n *     \n * \\@default null\n */\npublic valueAccessor: any;\n/**\n * If `visible` is set to false, hides the particular column. By default, all columns are displayed.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the width of the column in pixels or percentage.\n * \\@default ''\n */\npublic width: any;\n/**\n * Defines the column template that renders customized element in each cell of the column. \n * It accepts either [template string](../../common/template-engine/) or HTML element ID.\n * \\@default null\n */\n@Template()\n    public template: any;\n/**\n * Defines the column template as string or HTML element ID which is used to add customized element in the column header.\n * \\@default null\n */\n@Template()\n    public headerTemplate: any;\n    \n    @Template()\npublic commandsTemplate: any;\n    \n    @Template()\npublic filter_itemTemplate: any;\n/**\n * Defines the cell edit template that used as editor for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n */\n@Template()\n    public editTemplate: any;\n/**\n * Defines the filter template/UI that used as filter for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n */\n@Template()\n    public filterTemplate: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-grid>e-columns>e-column>e-stacked-columns>e-stacked-column',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ContentChild, args: ['template', ] },],\n'headerTemplate': [{ type: ContentChild, args: ['headerTemplate', ] },],\n'commandsTemplate': [{ type: ContentChild, args: ['commandsTemplate', ] },],\n'filter_itemTemplate': [{ type: ContentChild, args: ['filterItemTemplate', ] },],\n'editTemplate': [{ type: ContentChild, args: ['editTemplate', ] },],\n'filterTemplate': [{ type: ContentChild, args: ['filterTemplate', ] },],\n};\n}\n\nfunction StackedColumnDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStackedColumnDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStackedColumnDirective.ctorParameters;\n/** @type {?} */\nStackedColumnDirective.propDecorators;\n/** @type {?} */\nStackedColumnDirective.prototype.directivePropList;\n/**\n * Defines the data type of the column.\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.type;\n/**\n * If `allowEditing` set to false, then it disables editing of a particular column. \n * By default all columns are editable.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.allowEditing;\n/**\n * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column. \n * By default all columns are filterable.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.allowFiltering;\n/**\n * If `allowGrouping` set to false, then it disables grouping of a particular column. \n * By default all columns are groupable.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.allowGrouping;\n/**\n * If `allowReordering` set to false, then it disables reorder of a particular column. \n * By default all columns can be reorder.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.allowReordering;\n/**\n * If `allowResizing` set to false, it disables resize option of a particular column.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.allowResizing;\n/**\n * If `allowSearching` set to false, then it disables Searching of a particular column. \n * By default all columns allow Searching.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.allowSearching;\n/**\n * If `allowSorting` set to false, then it disables sorting option of a particular column. \n * By default all columns are sortable.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.allowSorting;\n/**\n * If `autoFit` set to true, then the particular column content width will be \n * adjusted based on its content in the initial rendering itself. \n * Setting this property as true is equivalent to calling `autoFitColumns` method in the `dataBound` event.\n * \\@default false\n * @type {?}\n */\nStackedColumnDirective.prototype.autoFit;\n/**\n * Defines the cell content's overflow mode. The available modes are \n * * `Clip` -  Truncates the cell content when it overflows its area. \n * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area. \n * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area \n * also it will display tooltip while hover on ellipsis applied cell.\n * \\@default Ellipsis\n * @type {?}\n */\nStackedColumnDirective.prototype.clipMode;\n/**\n * Used to render multiple header rows(stacked headers) on the Grid header.\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.columns;\n/**\n * `commands` provides an option to display command buttons in every cell. \n * The available built-in command buttons are \n * * Edit - Edit the record. \n * * Delete - Delete the record. \n * * Save - Save the record. \n * * Cancel - Cancel the edit state.\n * \n * The following code example implements the custom command column.\n * ```html\n * <style type=\"text/css\" class=\"cssStyles\">\n * .details-icon:before\n * {\n *   content:\"\\e74d\";\n * }\n * </style>\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * var gridObj = new Grid({\n * datasource: window.gridData,\n * columns : [\n * { field: 'CustomerID', headerText: 'Customer ID' },\n * { field: 'CustomerName', headerText: 'Customer Name' },\n * {commands: [{buttonOption:{content: 'Details', click: onClick, cssClass: details-icon}}], headerText: 'Customer Details'}\n * ]\n * gridObj.appendTo(\"#Grid\");\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.commands;\n/**\n * The CSS styles and attributes of the content cells of a particular column can be customized.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: filterData,\n * columns: [\n *   { field: 'OrderID', headerText: 'Order ID' },\n *   {\n *       field: 'EmployeeID', headerText: 'Employee ID', customAttributes: {\n *          class: 'employeeid',\n *          type: 'employee-id-cell'\n *     }\n *  }]\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.customAttributes;\n/**\n * Defines the column data source  which will act as foreign data source.\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.dataSource;\n/**\n * Defines default values for the component when adding a new record to the Grid.\n * \\@default null\n * \\@asptype object\n * @type {?}\n */\nStackedColumnDirective.prototype.defaultValue;\n/**\n * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.disableHtmlEncode;\n/**\n * If `displayAsCheckBox` is set to true, it displays the column value as a check box instead of Boolean value.\n * \\@default false\n * @type {?}\n */\nStackedColumnDirective.prototype.displayAsCheckBox;\n/**\n * Defines the `IEditCell`(../../grid/edit/#cell-edit-template) object to customize default edit cell.\n * \\@default {}\n * @type {?}\n */\nStackedColumnDirective.prototype.edit;\n/**\n * Defines the type of component for editing.\n * \\@default 'stringedit'\n * @type {?}\n */\nStackedColumnDirective.prototype.editType;\n/**\n * If `enableGroupByFormat` set to true, then it groups the particular column by formatted values. \n * By default no columns are group by format.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.enableGroupByFormat;\n/**\n * Defines the field name of column which is mapped with mapping name of DataSource. \n * The bounded columns can be sort, filter and group etc., \n * If the `field` name contains “dot”, then it is considered as complex binding. \n * The `field` name must be a valid JavaScript identifier, \n * the first character must be an alphabet and should not contain spaces and special characters.\n * \\@default ''\n * @type {?}\n */\nStackedColumnDirective.prototype.field;\n/**\n *  Defines the filter options to customize filtering for the particular column.\n * \n *  \\@default null\n * \n * @type {?}\n */\nStackedColumnDirective.prototype.filter;\n/**\n * The `filterBarTemplate` is used to add a custom component instead of default input component for filter bar. \n * It have create and read functions. \n * * create: It is used for creating custom components. \n * * read: It is used to perform custom filter action.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: filterData,\n * columns: [\n *  { field: 'OrderID', headerText: 'Order ID' },\n *  {\n *     field: 'EmployeeID', filterBarTemplate: {\n *        create: (args: { element: Element, column: Column }) => {\n *             let input: HTMLInputElement = document.createElement('input');\n *             input.id = 'EmployeeID';\n *             input.type = 'text';\n *             return input;\n *        },\n *        write: (args: { element: Element, column: Column }) => {\n *            args.element.addEventListener('input', args.column.filterBarTemplate.read as EventListener);\n *        },\n *        read: (args: { element: HTMLInputElement, columnIndex: number, column: Column }) => {\n *            gridObj.filterByColumn(args.element.id, 'equal', args.element.value);\n *       }\n *    }\n * }],\n *  allowFiltering: true\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.filterBarTemplate;\n/**\n * Defines the mapping column name of the foreign data source. \n * If it is not defined then the `columns.field` will be considered as mapping column name\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.foreignKeyField;\n/**\n * Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.foreignKeyValue;\n/**\n * It is used to change display value with the given format and does not affect the original data. \n * Gets the format from the user which can be standard or custom \n * [`number`](../../common/internationalization/#manipulating-numbers) \n * and [`date`](../../common/internationalization/#manipulating-datetime) formats.\n * \\@default null\n * \\@asptype string\n * @type {?}\n */\nStackedColumnDirective.prototype.format;\n/**\n * Defines the method which is used to achieve custom formatting from an external function. \n * This function triggers before rendering of each cell.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * class ExtendedFormatter implements ICellFormatter {\n * public getValue(column: Column, data: Object): Object {\n *  return '<span style=\"color:' + (data['Verified'] ? 'green' : 'red') + '\"><i>' + data['Verified'] + '</i><span>';\n * }\n * }\n * let gridObj: Grid = new Grid({\n *    dataSource: filterData,\n *    columns: [\n *        { field: 'ShipName', headerText: 'Ship Name' },\n *        { field: 'Verified', headerText: 'Verified Status', formatter: ExtendedFormatter }]\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.formatter;\n/**\n * defines which side the column need to freeze \n * The available built-in freeze directions are \n * * Left - Freeze the column at left side. \n * * Right - Freeze the column at right side.\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.freeze;\n/**\n * Defines the header text of column which is used to display in column header. \n * If `headerText` is not defined, then field name value will be assigned to header text.\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.headerText;\n/**\n * Define the alignment of column header which is used to align the text of column header.\n * \\@aspdefaultvalueignore\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.headerTextAlign;\n/**\n * Defines the method used to apply custom header cell values from external function and display this on each cell rendered.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],\n * columns: [\n *    { field: 'EmployeeID', headerText: 'Employee ID' },\n *    { field: 'EmployeeName', headerText: 'Employee First Name',\n *      headerValueAccessor: (field: string,column: Column) => {\n *            return \"newheadername\";\n *        },\n *    }]\n * });\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.headerValueAccessor;\n/**\n * column visibility can change based on its [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html). \n * `hideAtMedia` accepts only valid Media Queries.\n * \\@default ''\n * @type {?}\n */\nStackedColumnDirective.prototype.hideAtMedia;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.index;\n/**\n * You can use this property to freeze selected columns in grid.\n * \\@default false\n * @type {?}\n */\nStackedColumnDirective.prototype.isFrozen;\n/**\n * If `isIdentity` is set to true, then this column is considered as identity column.\n * \\@default false\n * @type {?}\n */\nStackedColumnDirective.prototype.isIdentity;\n/**\n * If `isPrimaryKey` is set to true, considers this column as the primary key constraint.\n * \\@default false\n * @type {?}\n */\nStackedColumnDirective.prototype.isPrimaryKey;\n/**\n * Defines the mapping column name of the foreign data source. \n * If it is not defined then the `columns.field` will be considered as mapping column name\n * \\@default false\n * @type {?}\n */\nStackedColumnDirective.prototype.lockColumn;\n/**\n * Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n * \\@default ''\n * @type {?}\n */\nStackedColumnDirective.prototype.maxWidth;\n/**\n * Defines the minimum width of the column in pixels or percentage.\n * \\@default ''\n * @type {?}\n */\nStackedColumnDirective.prototype.minWidth;\n/**\n * If `showColumnMenu` set to false, then it disable the column menu of a particular column. \n * By default column menu will show for all columns\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.showColumnMenu;\n/**\n * If `showInColumnChooser` set to false, then hides the particular column in column chooser. \n * By default all columns are displayed in column Chooser.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.showInColumnChooser;\n/**\n * It defines the custom sort comparer function.\n * @type {?}\n */\nStackedColumnDirective.prototype.sortComparer;\n/**\n * Defines the alignment of the column in both header and content cells.\n * \\@default Left\n * @type {?}\n */\nStackedColumnDirective.prototype.textAlign;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default ''\n * @type {?}\n */\nStackedColumnDirective.prototype.uid;\n/**\n * `editType`(../../grid/edit/#cell-edit-type-and-its-params) Defines rules to validate data before creating and updating.\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.validationRules;\n/**\n * Defines the method used to apply custom cell values from external function and display this on each cell rendered.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],\n * columns: [\n *    { field: 'EmployeeID', headerText: 'Employee ID' },\n *    { field: 'EmployeeName', headerText: 'Employee First Name',\n *      valueAccessor: (field: string, data: Object, column: Column) => {\n *            return data['EmployeeName'][0];\n *        },\n *    }]\n * });\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.valueAccessor;\n/**\n * If `visible` is set to false, hides the particular column. By default, all columns are displayed.\n * \\@default true\n * @type {?}\n */\nStackedColumnDirective.prototype.visible;\n/**\n * Defines the width of the column in pixels or percentage.\n * \\@default ''\n * @type {?}\n */\nStackedColumnDirective.prototype.width;\n/**\n * Defines the column template that renders customized element in each cell of the column. \n * It accepts either [template string](../../common/template-engine/) or HTML element ID.\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.template;\n/**\n * Defines the column template as string or HTML element ID which is used to add customized element in the column header.\n * \\@default null\n * @type {?}\n */\nStackedColumnDirective.prototype.headerTemplate;\n/** @type {?} */\nStackedColumnDirective.prototype.commandsTemplate;\n/** @type {?} */\nStackedColumnDirective.prototype.filter_itemTemplate;\n/**\n * Defines the cell edit template that used as editor for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n * @type {?}\n */\nStackedColumnDirective.prototype.editTemplate;\n/**\n * Defines the filter template/UI that used as filter for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n * @type {?}\n */\nStackedColumnDirective.prototype.filterTemplate;\n/** @type {?} */\nStackedColumnDirective.prototype.viewContainerRef;\n}\n\n/**\n * StackedColumn Array Directive\n */\nexport class StackedColumnsDirective extends ArrayBase<StackedColumnsDirective> {\nconstructor() {\n        super('columns');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-grid>e-columns>e-column>e-stacked-columns',\n    queries: {\n        children: new ContentChildren(StackedColumnDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StackedColumnsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nStackedColumnsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStackedColumnsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { StackedColumnsDirective } from './stacked-column.directive';\n\nlet /** @type {?} */ input: string[] = ['allowEditing', 'allowFiltering', 'allowGrouping', 'allowReordering', 'allowResizing', 'allowSearching', 'allowSorting', 'autoFit', 'clipMode', 'columns', 'commands', 'customAttributes', 'dataSource', 'defaultValue', 'disableHtmlEncode', 'displayAsCheckBox', 'edit', 'editTemplate', 'editType', 'enableGroupByFormat', 'field', 'filter', 'filterBarTemplate', 'filterTemplate', 'foreignKeyField', 'foreignKeyValue', 'format', 'formatter', 'freeze', 'headerTemplate', 'headerText', 'headerTextAlign', 'headerValueAccessor', 'hideAtMedia', 'index', 'isFrozen', 'isIdentity', 'isPrimaryKey', 'lockColumn', 'maxWidth', 'minWidth', 'showColumnMenu', 'showInColumnChooser', 'sortComparer', 'template', 'textAlign', 'type', 'uid', 'validationRules', 'valueAccessor', 'visible', 'width'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-column` directive represent a column of the Angular Grid. \n * It must be contained in a Grid component(`ejs-grid`). \n * ```html\n * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'> \n *   <e-columns>\n *    <e-column field='ID' width='100'></e-column>\n *    <e-column field='name' headerText='Name' width='100'></e-column>\n *   </e-columns>\n * </ejs-grid>\n * ```\n */\nexport class ColumnDirective extends ComplexBase<ColumnDirective> {\npublic directivePropList: any;\npublic childColumns: any;\npublic tags: string[] = ['columns'];\n/**\n * Defines the data type of the column.\n * \\@default null\n */\npublic type: any;\n/**\n * If `allowEditing` set to false, then it disables editing of a particular column. \n * By default all columns are editable.\n * \\@default true\n */\npublic allowEditing: any;\n/**\n * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column. \n * By default all columns are filterable.\n * \\@default true\n */\npublic allowFiltering: any;\n/**\n * If `allowGrouping` set to false, then it disables grouping of a particular column. \n * By default all columns are groupable.\n * \\@default true\n */\npublic allowGrouping: any;\n/**\n * If `allowReordering` set to false, then it disables reorder of a particular column. \n * By default all columns can be reorder.\n * \\@default true\n */\npublic allowReordering: any;\n/**\n * If `allowResizing` set to false, it disables resize option of a particular column.\n * \\@default true\n */\npublic allowResizing: any;\n/**\n * If `allowSearching` set to false, then it disables Searching of a particular column. \n * By default all columns allow Searching.\n * \\@default true\n */\npublic allowSearching: any;\n/**\n * If `allowSorting` set to false, then it disables sorting option of a particular column. \n * By default all columns are sortable.\n * \\@default true\n */\npublic allowSorting: any;\n/**\n * If `autoFit` set to true, then the particular column content width will be \n * adjusted based on its content in the initial rendering itself. \n * Setting this property as true is equivalent to calling `autoFitColumns` method in the `dataBound` event.\n * \\@default false\n */\npublic autoFit: any;\n/**\n * Defines the cell content's overflow mode. The available modes are \n * * `Clip` -  Truncates the cell content when it overflows its area. \n * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area. \n * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area \n * also it will display tooltip while hover on ellipsis applied cell.\n * \\@default Ellipsis\n */\npublic clipMode: any;\n/**\n * Used to render multiple header rows(stacked headers) on the Grid header.\n * \\@default null\n */\npublic columns: any;\n/**\n * `commands` provides an option to display command buttons in every cell. \n * The available built-in command buttons are \n * * Edit - Edit the record. \n * * Delete - Delete the record. \n * * Save - Save the record. \n * * Cancel - Cancel the edit state.\n * \n * The following code example implements the custom command column.\n * ```html\n * <style type=\"text/css\" class=\"cssStyles\">\n * .details-icon:before\n * {\n *   content:\"\\e74d\";\n * }\n * </style>\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * var gridObj = new Grid({\n * datasource: window.gridData,\n * columns : [\n * { field: 'CustomerID', headerText: 'Customer ID' },\n * { field: 'CustomerName', headerText: 'Customer Name' },\n * {commands: [{buttonOption:{content: 'Details', click: onClick, cssClass: details-icon}}], headerText: 'Customer Details'}\n * ]\n * gridObj.appendTo(\"#Grid\");\n * ```\n *     \n * \\@default null\n */\npublic commands: any;\n/**\n * The CSS styles and attributes of the content cells of a particular column can be customized.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: filterData,\n * columns: [\n *   { field: 'OrderID', headerText: 'Order ID' },\n *   {\n *       field: 'EmployeeID', headerText: 'Employee ID', customAttributes: {\n *          class: 'employeeid',\n *          type: 'employee-id-cell'\n *     }\n *  }]\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n */\npublic customAttributes: any;\n/**\n * Defines the column data source  which will act as foreign data source.\n * \\@default null\n */\npublic dataSource: any;\n/**\n * Defines default values for the component when adding a new record to the Grid.\n * \\@default null\n * \\@asptype object\n */\npublic defaultValue: any;\n/**\n * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.\n * \\@default true\n */\npublic disableHtmlEncode: any;\n/**\n * If `displayAsCheckBox` is set to true, it displays the column value as a check box instead of Boolean value.\n * \\@default false\n */\npublic displayAsCheckBox: any;\n/**\n * Defines the `IEditCell`(../../grid/edit/#cell-edit-template) object to customize default edit cell.\n * \\@default {}\n */\npublic edit: any;\n/**\n * Defines the type of component for editing.\n * \\@default 'stringedit'\n */\npublic editType: any;\n/**\n * If `enableGroupByFormat` set to true, then it groups the particular column by formatted values. \n * By default no columns are group by format.\n * \\@default true\n */\npublic enableGroupByFormat: any;\n/**\n * Defines the field name of column which is mapped with mapping name of DataSource. \n * The bounded columns can be sort, filter and group etc., \n * If the `field` name contains “dot”, then it is considered as complex binding. \n * The `field` name must be a valid JavaScript identifier, \n * the first character must be an alphabet and should not contain spaces and special characters.\n * \\@default ''\n */\npublic field: any;\n/**\n *  Defines the filter options to customize filtering for the particular column.\n * \n *  \\@default null\n * \n */\npublic filter: any;\n/**\n * The `filterBarTemplate` is used to add a custom component instead of default input component for filter bar. \n * It have create and read functions. \n * * create: It is used for creating custom components. \n * * read: It is used to perform custom filter action.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: filterData,\n * columns: [\n *  { field: 'OrderID', headerText: 'Order ID' },\n *  {\n *     field: 'EmployeeID', filterBarTemplate: {\n *        create: (args: { element: Element, column: Column }) => {\n *             let input: HTMLInputElement = document.createElement('input');\n *             input.id = 'EmployeeID';\n *             input.type = 'text';\n *             return input;\n *        },\n *        write: (args: { element: Element, column: Column }) => {\n *            args.element.addEventListener('input', args.column.filterBarTemplate.read as EventListener);\n *        },\n *        read: (args: { element: HTMLInputElement, columnIndex: number, column: Column }) => {\n *            gridObj.filterByColumn(args.element.id, 'equal', args.element.value);\n *       }\n *    }\n * }],\n *  allowFiltering: true\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n */\npublic filterBarTemplate: any;\n/**\n * Defines the mapping column name of the foreign data source. \n * If it is not defined then the `columns.field` will be considered as mapping column name\n * \\@default null\n */\npublic foreignKeyField: any;\n/**\n * Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data\n * \\@default null\n */\npublic foreignKeyValue: any;\n/**\n * It is used to change display value with the given format and does not affect the original data. \n * Gets the format from the user which can be standard or custom \n * [`number`](../../common/internationalization/#manipulating-numbers) \n * and [`date`](../../common/internationalization/#manipulating-datetime) formats.\n * \\@default null\n * \\@asptype string\n */\npublic format: any;\n/**\n * Defines the method which is used to achieve custom formatting from an external function. \n * This function triggers before rendering of each cell.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * class ExtendedFormatter implements ICellFormatter {\n * public getValue(column: Column, data: Object): Object {\n *  return '<span style=\"color:' + (data['Verified'] ? 'green' : 'red') + '\"><i>' + data['Verified'] + '</i><span>';\n * }\n * }\n * let gridObj: Grid = new Grid({\n *    dataSource: filterData,\n *    columns: [\n *        { field: 'ShipName', headerText: 'Ship Name' },\n *        { field: 'Verified', headerText: 'Verified Status', formatter: ExtendedFormatter }]\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n */\npublic formatter: any;\n/**\n * defines which side the column need to freeze \n * The available built-in freeze directions are \n * * Left - Freeze the column at left side. \n * * Right - Freeze the column at right side.\n * \\@default null\n */\npublic freeze: any;\n/**\n * Defines the header text of column which is used to display in column header. \n * If `headerText` is not defined, then field name value will be assigned to header text.\n * \\@default null\n */\npublic headerText: any;\n/**\n * Define the alignment of column header which is used to align the text of column header.\n * \\@aspdefaultvalueignore\n * \\@default null\n */\npublic headerTextAlign: any;\n/**\n * Defines the method used to apply custom header cell values from external function and display this on each cell rendered.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],\n * columns: [\n *    { field: 'EmployeeID', headerText: 'Employee ID' },\n *    { field: 'EmployeeName', headerText: 'Employee First Name',\n *      headerValueAccessor: (field: string,column: Column) => {\n *            return \"newheadername\";\n *        },\n *    }]\n * });\n * ```\n *     \n * \\@default null\n */\npublic headerValueAccessor: any;\n/**\n * column visibility can change based on its [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html). \n * `hideAtMedia` accepts only valid Media Queries.\n * \\@default ''\n */\npublic hideAtMedia: any;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default null\n */\npublic index: any;\n/**\n * You can use this property to freeze selected columns in grid.\n * \\@default false\n */\npublic isFrozen: any;\n/**\n * If `isIdentity` is set to true, then this column is considered as identity column.\n * \\@default false\n */\npublic isIdentity: any;\n/**\n * If `isPrimaryKey` is set to true, considers this column as the primary key constraint.\n * \\@default false\n */\npublic isPrimaryKey: any;\n/**\n * Defines the mapping column name of the foreign data source. \n * If it is not defined then the `columns.field` will be considered as mapping column name\n * \\@default false\n */\npublic lockColumn: any;\n/**\n * Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n * \\@default ''\n */\npublic maxWidth: any;\n/**\n * Defines the minimum width of the column in pixels or percentage.\n * \\@default ''\n */\npublic minWidth: any;\n/**\n * If `showColumnMenu` set to false, then it disable the column menu of a particular column. \n * By default column menu will show for all columns\n * \\@default true\n */\npublic showColumnMenu: any;\n/**\n * If `showInColumnChooser` set to false, then hides the particular column in column chooser. \n * By default all columns are displayed in column Chooser.\n * \\@default true\n */\npublic showInColumnChooser: any;\n/**\n * It defines the custom sort comparer function.\n */\npublic sortComparer: any;\n/**\n * Defines the alignment of the column in both header and content cells.\n * \\@default Left\n */\npublic textAlign: any;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default ''\n */\npublic uid: any;\n/**\n * `editType`(../../grid/edit/#cell-edit-type-and-its-params) Defines rules to validate data before creating and updating.\n * \\@default null\n */\npublic validationRules: any;\n/**\n * Defines the method used to apply custom cell values from external function and display this on each cell rendered.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],\n * columns: [\n *    { field: 'EmployeeID', headerText: 'Employee ID' },\n *    { field: 'EmployeeName', headerText: 'Employee First Name',\n *      valueAccessor: (field: string, data: Object, column: Column) => {\n *            return data['EmployeeName'][0];\n *        },\n *    }]\n * });\n * ```\n *     \n * \\@default null\n */\npublic valueAccessor: any;\n/**\n * If `visible` is set to false, hides the particular column. By default, all columns are displayed.\n * \\@default true\n */\npublic visible: any;\n/**\n * Defines the width of the column in pixels or percentage.\n * \\@default ''\n */\npublic width: any;\n/**\n * Defines the column template that renders customized element in each cell of the column. \n * It accepts either [template string](../../common/template-engine/) or HTML element ID.\n * \\@default null\n */\n@Template()\n    public template: any;\n/**\n * Defines the column template as string or HTML element ID which is used to add customized element in the column header.\n * \\@default null\n */\n@Template()\n    public headerTemplate: any;\n    \n    @Template()\npublic commandsTemplate: any;\n    \n    @Template()\npublic filter_itemTemplate: any;\n/**\n * Defines the cell edit template that used as editor for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n */\n@Template()\n    public editTemplate: any;\n/**\n * Defines the filter template/UI that used as filter for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n */\n@Template()\n    public filterTemplate: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-grid>e-columns>e-column',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childColumns: new ContentChild(StackedColumnsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ContentChild, args: ['template', ] },],\n'headerTemplate': [{ type: ContentChild, args: ['headerTemplate', ] },],\n'commandsTemplate': [{ type: ContentChild, args: ['commandsTemplate', ] },],\n'filter_itemTemplate': [{ type: ContentChild, args: ['filterItemTemplate', ] },],\n'editTemplate': [{ type: ContentChild, args: ['editTemplate', ] },],\n'filterTemplate': [{ type: ContentChild, args: ['filterTemplate', ] },],\n};\n}\n\nfunction ColumnDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnDirective.ctorParameters;\n/** @type {?} */\nColumnDirective.propDecorators;\n/** @type {?} */\nColumnDirective.prototype.directivePropList;\n/** @type {?} */\nColumnDirective.prototype.childColumns;\n/** @type {?} */\nColumnDirective.prototype.tags;\n/**\n * Defines the data type of the column.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.type;\n/**\n * If `allowEditing` set to false, then it disables editing of a particular column. \n * By default all columns are editable.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowEditing;\n/**\n * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column. \n * By default all columns are filterable.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowFiltering;\n/**\n * If `allowGrouping` set to false, then it disables grouping of a particular column. \n * By default all columns are groupable.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowGrouping;\n/**\n * If `allowReordering` set to false, then it disables reorder of a particular column. \n * By default all columns can be reorder.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowReordering;\n/**\n * If `allowResizing` set to false, it disables resize option of a particular column.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowResizing;\n/**\n * If `allowSearching` set to false, then it disables Searching of a particular column. \n * By default all columns allow Searching.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowSearching;\n/**\n * If `allowSorting` set to false, then it disables sorting option of a particular column. \n * By default all columns are sortable.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.allowSorting;\n/**\n * If `autoFit` set to true, then the particular column content width will be \n * adjusted based on its content in the initial rendering itself. \n * Setting this property as true is equivalent to calling `autoFitColumns` method in the `dataBound` event.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.autoFit;\n/**\n * Defines the cell content's overflow mode. The available modes are \n * * `Clip` -  Truncates the cell content when it overflows its area. \n * * `Ellipsis` -  Displays ellipsis when the cell content overflows its area. \n * * `EllipsisWithTooltip` - Displays ellipsis when the cell content overflows its area \n * also it will display tooltip while hover on ellipsis applied cell.\n * \\@default Ellipsis\n * @type {?}\n */\nColumnDirective.prototype.clipMode;\n/**\n * Used to render multiple header rows(stacked headers) on the Grid header.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.columns;\n/**\n * `commands` provides an option to display command buttons in every cell. \n * The available built-in command buttons are \n * * Edit - Edit the record. \n * * Delete - Delete the record. \n * * Save - Save the record. \n * * Cancel - Cancel the edit state.\n * \n * The following code example implements the custom command column.\n * ```html\n * <style type=\"text/css\" class=\"cssStyles\">\n * .details-icon:before\n * {\n *   content:\"\\e74d\";\n * }\n * </style>\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * var gridObj = new Grid({\n * datasource: window.gridData,\n * columns : [\n * { field: 'CustomerID', headerText: 'Customer ID' },\n * { field: 'CustomerName', headerText: 'Customer Name' },\n * {commands: [{buttonOption:{content: 'Details', click: onClick, cssClass: details-icon}}], headerText: 'Customer Details'}\n * ]\n * gridObj.appendTo(\"#Grid\");\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.commands;\n/**\n * The CSS styles and attributes of the content cells of a particular column can be customized.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: filterData,\n * columns: [\n *   { field: 'OrderID', headerText: 'Order ID' },\n *   {\n *       field: 'EmployeeID', headerText: 'Employee ID', customAttributes: {\n *          class: 'employeeid',\n *          type: 'employee-id-cell'\n *     }\n *  }]\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.customAttributes;\n/**\n * Defines the column data source  which will act as foreign data source.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.dataSource;\n/**\n * Defines default values for the component when adding a new record to the Grid.\n * \\@default null\n * \\@asptype object\n * @type {?}\n */\nColumnDirective.prototype.defaultValue;\n/**\n * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.disableHtmlEncode;\n/**\n * If `displayAsCheckBox` is set to true, it displays the column value as a check box instead of Boolean value.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.displayAsCheckBox;\n/**\n * Defines the `IEditCell`(../../grid/edit/#cell-edit-template) object to customize default edit cell.\n * \\@default {}\n * @type {?}\n */\nColumnDirective.prototype.edit;\n/**\n * Defines the type of component for editing.\n * \\@default 'stringedit'\n * @type {?}\n */\nColumnDirective.prototype.editType;\n/**\n * If `enableGroupByFormat` set to true, then it groups the particular column by formatted values. \n * By default no columns are group by format.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.enableGroupByFormat;\n/**\n * Defines the field name of column which is mapped with mapping name of DataSource. \n * The bounded columns can be sort, filter and group etc., \n * If the `field` name contains “dot”, then it is considered as complex binding. \n * The `field` name must be a valid JavaScript identifier, \n * the first character must be an alphabet and should not contain spaces and special characters.\n * \\@default ''\n * @type {?}\n */\nColumnDirective.prototype.field;\n/**\n *  Defines the filter options to customize filtering for the particular column.\n * \n *  \\@default null\n * \n * @type {?}\n */\nColumnDirective.prototype.filter;\n/**\n * The `filterBarTemplate` is used to add a custom component instead of default input component for filter bar. \n * It have create and read functions. \n * * create: It is used for creating custom components. \n * * read: It is used to perform custom filter action.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: filterData,\n * columns: [\n *  { field: 'OrderID', headerText: 'Order ID' },\n *  {\n *     field: 'EmployeeID', filterBarTemplate: {\n *        create: (args: { element: Element, column: Column }) => {\n *             let input: HTMLInputElement = document.createElement('input');\n *             input.id = 'EmployeeID';\n *             input.type = 'text';\n *             return input;\n *        },\n *        write: (args: { element: Element, column: Column }) => {\n *            args.element.addEventListener('input', args.column.filterBarTemplate.read as EventListener);\n *        },\n *        read: (args: { element: HTMLInputElement, columnIndex: number, column: Column }) => {\n *            gridObj.filterByColumn(args.element.id, 'equal', args.element.value);\n *       }\n *    }\n * }],\n *  allowFiltering: true\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.filterBarTemplate;\n/**\n * Defines the mapping column name of the foreign data source. \n * If it is not defined then the `columns.field` will be considered as mapping column name\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.foreignKeyField;\n/**\n * Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.foreignKeyValue;\n/**\n * It is used to change display value with the given format and does not affect the original data. \n * Gets the format from the user which can be standard or custom \n * [`number`](../../common/internationalization/#manipulating-numbers) \n * and [`date`](../../common/internationalization/#manipulating-datetime) formats.\n * \\@default null\n * \\@asptype string\n * @type {?}\n */\nColumnDirective.prototype.format;\n/**\n * Defines the method which is used to achieve custom formatting from an external function. \n * This function triggers before rendering of each cell.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * class ExtendedFormatter implements ICellFormatter {\n * public getValue(column: Column, data: Object): Object {\n *  return '<span style=\"color:' + (data['Verified'] ? 'green' : 'red') + '\"><i>' + data['Verified'] + '</i><span>';\n * }\n * }\n * let gridObj: Grid = new Grid({\n *    dataSource: filterData,\n *    columns: [\n *        { field: 'ShipName', headerText: 'Ship Name' },\n *        { field: 'Verified', headerText: 'Verified Status', formatter: ExtendedFormatter }]\n * });\n * gridObj.appendTo('#Grid');\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.formatter;\n/**\n * defines which side the column need to freeze \n * The available built-in freeze directions are \n * * Left - Freeze the column at left side. \n * * Right - Freeze the column at right side.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.freeze;\n/**\n * Defines the header text of column which is used to display in column header. \n * If `headerText` is not defined, then field name value will be assigned to header text.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.headerText;\n/**\n * Define the alignment of column header which is used to align the text of column header.\n * \\@aspdefaultvalueignore\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.headerTextAlign;\n/**\n * Defines the method used to apply custom header cell values from external function and display this on each cell rendered.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],\n * columns: [\n *    { field: 'EmployeeID', headerText: 'Employee ID' },\n *    { field: 'EmployeeName', headerText: 'Employee First Name',\n *      headerValueAccessor: (field: string,column: Column) => {\n *            return \"newheadername\";\n *        },\n *    }]\n * });\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.headerValueAccessor;\n/**\n * column visibility can change based on its [`Media Queries`](http://cssmediaqueries.com/what-are-css-media-queries.html). \n * `hideAtMedia` accepts only valid Media Queries.\n * \\@default ''\n * @type {?}\n */\nColumnDirective.prototype.hideAtMedia;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.index;\n/**\n * You can use this property to freeze selected columns in grid.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.isFrozen;\n/**\n * If `isIdentity` is set to true, then this column is considered as identity column.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.isIdentity;\n/**\n * If `isPrimaryKey` is set to true, considers this column as the primary key constraint.\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.isPrimaryKey;\n/**\n * Defines the mapping column name of the foreign data source. \n * If it is not defined then the `columns.field` will be considered as mapping column name\n * \\@default false\n * @type {?}\n */\nColumnDirective.prototype.lockColumn;\n/**\n * Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n * \\@default ''\n * @type {?}\n */\nColumnDirective.prototype.maxWidth;\n/**\n * Defines the minimum width of the column in pixels or percentage.\n * \\@default ''\n * @type {?}\n */\nColumnDirective.prototype.minWidth;\n/**\n * If `showColumnMenu` set to false, then it disable the column menu of a particular column. \n * By default column menu will show for all columns\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.showColumnMenu;\n/**\n * If `showInColumnChooser` set to false, then hides the particular column in column chooser. \n * By default all columns are displayed in column Chooser.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.showInColumnChooser;\n/**\n * It defines the custom sort comparer function.\n * @type {?}\n */\nColumnDirective.prototype.sortComparer;\n/**\n * Defines the alignment of the column in both header and content cells.\n * \\@default Left\n * @type {?}\n */\nColumnDirective.prototype.textAlign;\n/**\n * Gets the unique identifier value of the column. It is used to get the object.\n * \\@default ''\n * @type {?}\n */\nColumnDirective.prototype.uid;\n/**\n * `editType`(../../grid/edit/#cell-edit-type-and-its-params) Defines rules to validate data before creating and updating.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.validationRules;\n/**\n * Defines the method used to apply custom cell values from external function and display this on each cell rendered.\n * \n * ```html\n * <div id=\"Grid\"></div>\n * ```\n * ```typescript\n * let gridObj: Grid = new Grid({\n * dataSource: [{ EmployeeID: 1, EmployeeName: ['John', 'M'] }, { EmployeeID: 2, EmployeeName: ['Peter', 'A'] }],\n * columns: [\n *    { field: 'EmployeeID', headerText: 'Employee ID' },\n *    { field: 'EmployeeName', headerText: 'Employee First Name',\n *      valueAccessor: (field: string, data: Object, column: Column) => {\n *            return data['EmployeeName'][0];\n *        },\n *    }]\n * });\n * ```\n *     \n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.valueAccessor;\n/**\n * If `visible` is set to false, hides the particular column. By default, all columns are displayed.\n * \\@default true\n * @type {?}\n */\nColumnDirective.prototype.visible;\n/**\n * Defines the width of the column in pixels or percentage.\n * \\@default ''\n * @type {?}\n */\nColumnDirective.prototype.width;\n/**\n * Defines the column template that renders customized element in each cell of the column. \n * It accepts either [template string](../../common/template-engine/) or HTML element ID.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.template;\n/**\n * Defines the column template as string or HTML element ID which is used to add customized element in the column header.\n * \\@default null\n * @type {?}\n */\nColumnDirective.prototype.headerTemplate;\n/** @type {?} */\nColumnDirective.prototype.commandsTemplate;\n/** @type {?} */\nColumnDirective.prototype.filter_itemTemplate;\n/**\n * Defines the cell edit template that used as editor for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n * @type {?}\n */\nColumnDirective.prototype.editTemplate;\n/**\n * Defines the filter template/UI that used as filter for a particular column. \n * It accepts either template string or HTML element ID.\n * \\@aspignore\n * @type {?}\n */\nColumnDirective.prototype.filterTemplate;\n/** @type {?} */\nColumnDirective.prototype.viewContainerRef;\n}\n\n/**\n * Column Array Directive\n */\nexport class ColumnsDirective extends ArrayBase<ColumnsDirective> {\nconstructor() {\n        super('columns');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-grid>e-columns',\n    queries: {\n        children: new ContentChildren(ColumnDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ColumnsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nColumnsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nColumnsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nlet /** @type {?} */ input: string[] = ['columnName', 'customAggregate', 'field', 'footerTemplate', 'format', 'groupCaptionTemplate', 'groupFooterTemplate', 'type'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-aggregate->e-column` directive represent a aggregate column of the Angular Grid. \n * ```html\n * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'> \n *   <e-columns>\n *     <e-column field='ID' width='100'></e-column>\n *     <e-column field='name' headerText='Name' width='100'></e-column>\n *   </e-columns>\n *   <e-aggregates>\n *     <e-aggregate>\n *       <e-columns>\n *         <e-column field='ID' type='Min'></e-column>\n *       </e-columns>\n *      </e-aggregate>\n *    </e-aggregates>\n * </ejs-grid>\n * ```\n */\nexport class AggregateColumnDirective extends ComplexBase<AggregateColumnDirective> {\npublic directivePropList: any;\n/**\n * Defines the aggregate type of a particular column. \n * To use multiple aggregates for single column, specify the `type` as array. \n * Types of aggregate are, \n * * sum \n * * average \n * * max \n * * min \n * * count \n * * truecount \n * * falsecount \n * * custom \n * > Specify the `type` value as `custom` to use custom aggregation.\n * \\@asptype string\n * \\@default null\n */\npublic type: any;\n/**\n * Defines the column name to display the aggregate value. If `columnName` is not defined, \n * then `field` name value will be assigned to the `columnName` property.\n * \\@default null\n */\npublic columnName: any;\n/**\n * Defines a function to calculate custom aggregate value. The `type` value should be set to `custom`. \n * To use custom aggregate value in the template, use the key as `${custom}`. \n * **Total aggregation**: The custom function will be called with the whole data and the current `AggregateColumn` object. \n * **Group aggregation**: This will be called with the current group details and the `AggregateColumn` object.\n * \\@default null\n */\npublic customAggregate: any;\n/**\n * Defines the column name to perform aggregation.\n * \\@default null\n */\npublic field: any;\n/**\n * Format is applied to a calculated value before it is displayed. \n * Gets the format from the user, which can be standard or custom \n * [`number`](../../common/internationalization/#number-formatting/) \n * and [`date`](../../common/internationalization/#number-formatting/) formats.\n * \\@asptype string\n * \\@blazortype string\n * \\@default null\n */\npublic format: any;\n/**\n * Defines the footer cell template as a string for the aggregate column. \n * The `type` name should be used to access aggregate values inside the template.\n * \n * {% codeBlock src=\"grid/footer-template-api/index.ts\" %}{% endcodeBlock %}\n *     \n * \\@default null\n */\n@Template()\n    public footerTemplate: any;\n/**\n * Defines the group footer cell template as a string for the aggregate column. \n * The `type` name should be used to access aggregate values inside the template. \n * Additionally, the following fields can be accessed in the template. \n * * **field**: The current grouped field. \n * * **key**: The current grouped value.\n * \n * {% codeBlock src=\"grid/group-footer-api/index.ts\" %}{% endcodeBlock %}\n *     \n * \\@default null\n */\n@Template()\n    public groupFooterTemplate: any;\n/**\n * Defines the group caption cell template as a string for the aggregate column. \n * The `type` name should be used to access aggregate values inside the template. \n * Additionally, the following fields can be accessed in the template. \n * * **field**: The current grouped field name. \n * * **key**: The current grouped field value.\n * \n * {% codeBlock src=\"grid/group-caption-api/index.ts\" %}{% endcodeBlock %}\n *     \n * \\@default null\n */\n@Template()\n    public groupCaptionTemplate: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-grid>e-aggregates>e-aggregate>e-columns>e-column',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'footerTemplate': [{ type: ContentChild, args: ['footerTemplate', ] },],\n'groupFooterTemplate': [{ type: ContentChild, args: ['groupFooterTemplate', ] },],\n'groupCaptionTemplate': [{ type: ContentChild, args: ['groupCaptionTemplate', ] },],\n};\n}\n\nfunction AggregateColumnDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAggregateColumnDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAggregateColumnDirective.ctorParameters;\n/** @type {?} */\nAggregateColumnDirective.propDecorators;\n/** @type {?} */\nAggregateColumnDirective.prototype.directivePropList;\n/**\n * Defines the aggregate type of a particular column. \n * To use multiple aggregates for single column, specify the `type` as array. \n * Types of aggregate are, \n * * sum \n * * average \n * * max \n * * min \n * * count \n * * truecount \n * * falsecount \n * * custom \n * > Specify the `type` value as `custom` to use custom aggregation.\n * \\@asptype string\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.type;\n/**\n * Defines the column name to display the aggregate value. If `columnName` is not defined, \n * then `field` name value will be assigned to the `columnName` property.\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.columnName;\n/**\n * Defines a function to calculate custom aggregate value. The `type` value should be set to `custom`. \n * To use custom aggregate value in the template, use the key as `${custom}`. \n * **Total aggregation**: The custom function will be called with the whole data and the current `AggregateColumn` object. \n * **Group aggregation**: This will be called with the current group details and the `AggregateColumn` object.\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.customAggregate;\n/**\n * Defines the column name to perform aggregation.\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.field;\n/**\n * Format is applied to a calculated value before it is displayed. \n * Gets the format from the user, which can be standard or custom \n * [`number`](../../common/internationalization/#number-formatting/) \n * and [`date`](../../common/internationalization/#number-formatting/) formats.\n * \\@asptype string\n * \\@blazortype string\n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.format;\n/**\n * Defines the footer cell template as a string for the aggregate column. \n * The `type` name should be used to access aggregate values inside the template.\n * \n * {% codeBlock src=\"grid/footer-template-api/index.ts\" %}{% endcodeBlock %}\n *     \n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.footerTemplate;\n/**\n * Defines the group footer cell template as a string for the aggregate column. \n * The `type` name should be used to access aggregate values inside the template. \n * Additionally, the following fields can be accessed in the template. \n * * **field**: The current grouped field. \n * * **key**: The current grouped value.\n * \n * {% codeBlock src=\"grid/group-footer-api/index.ts\" %}{% endcodeBlock %}\n *     \n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.groupFooterTemplate;\n/**\n * Defines the group caption cell template as a string for the aggregate column. \n * The `type` name should be used to access aggregate values inside the template. \n * Additionally, the following fields can be accessed in the template. \n * * **field**: The current grouped field name. \n * * **key**: The current grouped field value.\n * \n * {% codeBlock src=\"grid/group-caption-api/index.ts\" %}{% endcodeBlock %}\n *     \n * \\@default null\n * @type {?}\n */\nAggregateColumnDirective.prototype.groupCaptionTemplate;\n/** @type {?} */\nAggregateColumnDirective.prototype.viewContainerRef;\n}\n\n/**\n * AggregateColumn Array Directive\n */\nexport class AggregateColumnsDirective extends ArrayBase<AggregateColumnsDirective> {\nconstructor() {\n        super('columns');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-grid>e-aggregates>e-aggregate>e-columns',\n    queries: {\n        children: new ContentChildren(AggregateColumnDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AggregateColumnsDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAggregateColumnsDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAggregateColumnsDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';\nimport { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';\n\nimport { AggregateColumnsDirective } from './aggregate-columns.directive';\n\nlet /** @type {?} */ input: string[] = ['columns'];\nlet /** @type {?} */ outputs: string[] = [];\n/**\n * `e-aggregate` directive represent a aggregate row of the Angular Grid. \n * It must be contained in a Grid component(`ejs-grid`). \n * ```html\n * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'> \n *   <e-columns>\n *     <e-column field='ID' width='100'></e-column>\n *     <e-column field='name' headerText='Name' width='100'></e-column>\n *   </e-columns>\n *   <e-aggregates>\n *     <e-aggregate>\n *       <e-columns>\n *         <e-column field='ID' type='Min'></e-column>\n *       </e-columns>\n *      </e-aggregate>\n *    </e-aggregates>\n * </ejs-grid>\n * ```\n */\nexport class AggregateDirective extends ComplexBase<AggregateDirective> {\npublic directivePropList: any;\npublic childColumns: any;\npublic tags: string[] = ['columns'];\n/**\n * Configures the aggregate columns.\n * \\@default []\n */\npublic columns: any;\n/**\n * @param {?} viewContainerRef\n */\nconstructor(private viewContainerRef:ViewContainerRef) {\n        super();\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.registerEvents(outputs);\n        this.directivePropList = input;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-grid>e-aggregates>e-aggregate',\n    inputs: input,\n    outputs: outputs,    \n    queries: {\n        childColumns: new ContentChild(AggregateColumnsDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction AggregateDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAggregateDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAggregateDirective.ctorParameters;\n/** @type {?} */\nAggregateDirective.prototype.directivePropList;\n/** @type {?} */\nAggregateDirective.prototype.childColumns;\n/** @type {?} */\nAggregateDirective.prototype.tags;\n/**\n * Configures the aggregate columns.\n * \\@default []\n * @type {?}\n */\nAggregateDirective.prototype.columns;\n/** @type {?} */\nAggregateDirective.prototype.viewContainerRef;\n}\n\n/**\n * Aggregate Array Directive\n */\nexport class AggregatesDirective extends ArrayBase<AggregatesDirective> {\nconstructor() {\n        super('aggregates');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'ejs-grid>e-aggregates',\n    queries: {\n        children: new ContentChildren(AggregateDirective)\n    },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AggregatesDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAggregatesDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAggregatesDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Grid } from '@syncfusion/ej2-grids';\nimport { Template } from '@syncfusion/ej2-angular-base';\nimport { ColumnsDirective } from './columns.directive';\nimport { AggregatesDirective } from './aggregates.directive';\n\nexport const /** @type {?} */ inputs: string[] = ['aggregates','allowExcelExport','allowFiltering','allowGrouping','allowKeyboard','allowMultiSorting','allowPaging','allowPdfExport','allowReordering','allowResizing','allowRowDragAndDrop','allowSelection','allowSorting','allowTextWrap','childGrid','clipMode','columnChooserSettings','columnMenuItems','columnQueryMode','columns','contextMenuItems','currencyCode','currentAction','dataSource','detailTemplate','editSettings','ej2StatePersistenceVersion','enableAdaptiveUI','enableAltRow','enableAutoFill','enableColumnVirtualization','enableHeaderFocus','enableHover','enableImmutableMode','enableInfiniteScrolling','enablePersistence','enableRtl','enableStickyHeader','enableVirtualization','filterSettings','frozenColumns','frozenRows','gridLines','groupSettings','height','hierarchyPrintMode','infiniteScrollSettings','locale','pageSettings','pagerTemplate','parentDetails','printMode','query','queryString','resizeSettings','rowDropSettings','rowHeight','rowRenderingMode','rowTemplate','searchSettings','selectedRowIndex','selectionSettings','showColumnChooser','showColumnMenu','sortSettings','textWrapSettings','toolbar','toolbarTemplate','width'];\nexport const /** @type {?} */ outputs: string[] = ['actionBegin','actionComplete','actionFailure','batchAdd','batchCancel','batchDelete','beforeAutoFill','beforeBatchAdd','beforeBatchDelete','beforeBatchSave','beforeCopy','beforeDataBound','beforeExcelExport','beforeOpenAdaptiveDialog','beforeOpenColumnChooser','beforePaste','beforePdfExport','beforePrint','beginEdit','cellDeselected','cellDeselecting','cellEdit','cellSave','cellSaved','cellSelected','cellSelecting','checkBoxChange','columnDataStateChange','columnDeselected','columnDeselecting','columnDrag','columnDragStart','columnDrop','columnMenuClick','columnMenuOpen','columnSelected','columnSelecting','commandClick','contextMenuClick','contextMenuOpen','created','dataBound','dataSourceChanged','dataStateChange','destroyed','detailDataBound','excelAggregateQueryCellInfo','excelExportComplete','excelHeaderQueryCellInfo','excelQueryCellInfo','exportDetailDataBound','exportGroupCaption','headerCellInfo','keyPressed','lazyLoadGroupCollapse','lazyLoadGroupExpand','load','pdfAggregateQueryCellInfo','pdfExportComplete','pdfHeaderQueryCellInfo','pdfQueryCellInfo','printComplete','queryCellInfo','recordClick','recordDoubleClick','resizeStart','resizeStop','resizing','rowDataBound','rowDeselected','rowDeselecting','rowDrag','rowDragStart','rowDragStartHelper','rowDrop','rowSelected','rowSelecting','toolbarClick','dataSourceChange'];\nexport const /** @type {?} */ twoWays: string[] = ['dataSource'];\n/**\n * `ejs-grid` represents the Angular Grid Component.\n * ```html\n * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'></ejs-grid>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class GridComponent extends Grid implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\n\tactionBegin: any;\n\tactionComplete: any;\n\tactionFailure: any;\n\tbatchAdd: any;\n\tbatchCancel: any;\n\tbatchDelete: any;\n\tbeforeAutoFill: any;\n\tbeforeBatchAdd: any;\n\tbeforeBatchDelete: any;\n\tbeforeBatchSave: any;\n\tbeforeCopy: any;\n\tbeforeDataBound: any;\n\tbeforeExcelExport: any;\n\tbeforeOpenAdaptiveDialog: any;\n\tbeforeOpenColumnChooser: any;\n\tbeforePaste: any;\n\tbeforePdfExport: any;\n\tbeforePrint: any;\n\tbeginEdit: any;\n\tcellDeselected: any;\n\tcellDeselecting: any;\n\tcellEdit: any;\n\tcellSave: any;\n\tcellSaved: any;\n\tcellSelected: any;\n\tcellSelecting: any;\n\tcheckBoxChange: any;\n\tcolumnDataStateChange: any;\n\tcolumnDeselected: any;\n\tcolumnDeselecting: any;\n\tcolumnDrag: any;\n\tcolumnDragStart: any;\n\tcolumnDrop: any;\n\tcolumnMenuClick: any;\n\tcolumnMenuOpen: any;\n\tcolumnSelected: any;\n\tcolumnSelecting: any;\n\tcommandClick: any;\n\tcontextMenuClick: any;\n\tcontextMenuOpen: any;\n\tcreated: any;\n\tdataBound: any;\n\tdataSourceChanged: any;\n\tdataStateChange: any;\n\tdestroyed: any;\n\tdetailDataBound: any;\n\texcelAggregateQueryCellInfo: any;\n\texcelExportComplete: any;\n\texcelHeaderQueryCellInfo: any;\n\texcelQueryCellInfo: any;\n\texportDetailDataBound: any;\n\texportGroupCaption: any;\n\theaderCellInfo: any;\n\tkeyPressed: any;\n\tlazyLoadGroupCollapse: any;\n\tlazyLoadGroupExpand: any;\n\tload: any;\n\tpdfAggregateQueryCellInfo: any;\n\tpdfExportComplete: any;\n\tpdfHeaderQueryCellInfo: any;\n\tpdfQueryCellInfo: any;\n\tprintComplete: any;\n\tqueryCellInfo: any;\n\trecordClick: any;\n\trecordDoubleClick: any;\n\tresizeStart: any;\n\tresizeStop: any;\n\tresizing: any;\n\trowDataBound: any;\n\trowDeselected: any;\n\trowDeselecting: any;\n\trowDrag: any;\n\trowDragStart: any;\n\trowDragStartHelper: any;\n\trowDrop: any;\n\trowSelected: any;\n\trowSelecting: any;\n\ttoolbarClick: any;\npublic dataSourceChange: any;\npublic childColumns: QueryList<ColumnsDirective>;\npublic childAggregates: QueryList<AggregatesDirective>;\npublic tags: string[] = ['columns', 'aggregates'];\n/**\n * The row template that renders customized rows from the given template. \n * By default, Grid renders a table row for every data source item. \n * > * It accepts either [template string](../../common/template-engine/) or HTML element ID. \n * > * The row template must be a table row.\n * \n * > Check the [`Row Template`](../../grid/row/) customization.\n * \n */\n@Template()\n    public rowTemplate: any;\n/**\n * The detail template allows you to show or hide additional information about a particular row.\n * \n * > It accepts either the [template string](../../common/template-engine/) or the HTML element ID.\n * \n * {% codeBlock src=\"grid/detail-template-api/index.ts\" %}{% endcodeBlock %}\n * \n */\n@Template()\n    public detailTemplate: any;\n/**\n * It used to render toolbar template\n * \\@default null\n */\n@Template()\n    public toolbarTemplate: any;\n/**\n * It used to render pager template\n * \\@default null\n */\n@Template()\n    public pagerTemplate: any;\n    \n    @Template()\npublic editSettings_template: any;\n    \n    @Template()\npublic groupSettings_captionTemplate: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n        try {\n                let mod = this.injector.get('GridsFilter');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsPage');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsSelection');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsSort');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsGroup');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsReorder');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsRowDD');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsDetailRow');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsToolbar');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsAggregate');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsSearch');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsVirtualScroll');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsEdit');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsResize');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsExcelExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsPdfExport');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsCommandColumn');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsContextMenu');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsFreeze');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsColumnMenu');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsColumnChooser');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsForeignKey');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsInfiniteScroll');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n        try {\n                let mod = this.injector.get('GridsLazyLoadGroup');\n                if(this.injectedModules.indexOf(mod) === -1) {\n                    this.injectedModules.push(mod)\n                }\n            } catch { }\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        this.tagObjects[0].instance = this.childColumns;\n        if (this.childAggregates) {\n                    this.tagObjects[1].instance = /** @type {?} */(( this.childAggregates as any));\n                }\n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-grid',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n        childColumns: new ContentChild(ColumnsDirective), \n        childAggregates: new ContentChild(AggregatesDirective)\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowTemplate': [{ type: ContentChild, args: ['rowTemplate', ] },],\n'detailTemplate': [{ type: ContentChild, args: ['detailTemplate', ] },],\n'toolbarTemplate': [{ type: ContentChild, args: ['toolbarTemplate', ] },],\n'pagerTemplate': [{ type: ContentChild, args: ['pagerTemplate', ] },],\n'editSettings_template': [{ type: ContentChild, args: ['editSettingsTemplate', ] },],\n'groupSettings_captionTemplate': [{ type: ContentChild, args: ['groupSettingsCaptionTemplate', ] },],\n};\n}\n\nfunction GridComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nGridComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGridComponent.ctorParameters;\n/** @type {?} */\nGridComponent.propDecorators;\n/** @type {?} */\nGridComponent.prototype.context;\n/** @type {?} */\nGridComponent.prototype.tagObjects;\n/** @type {?} */\nGridComponent.prototype.actionBegin;\n/** @type {?} */\nGridComponent.prototype.actionComplete;\n/** @type {?} */\nGridComponent.prototype.actionFailure;\n/** @type {?} */\nGridComponent.prototype.batchAdd;\n/** @type {?} */\nGridComponent.prototype.batchCancel;\n/** @type {?} */\nGridComponent.prototype.batchDelete;\n/** @type {?} */\nGridComponent.prototype.beforeAutoFill;\n/** @type {?} */\nGridComponent.prototype.beforeBatchAdd;\n/** @type {?} */\nGridComponent.prototype.beforeBatchDelete;\n/** @type {?} */\nGridComponent.prototype.beforeBatchSave;\n/** @type {?} */\nGridComponent.prototype.beforeCopy;\n/** @type {?} */\nGridComponent.prototype.beforeDataBound;\n/** @type {?} */\nGridComponent.prototype.beforeExcelExport;\n/** @type {?} */\nGridComponent.prototype.beforeOpenAdaptiveDialog;\n/** @type {?} */\nGridComponent.prototype.beforeOpenColumnChooser;\n/** @type {?} */\nGridComponent.prototype.beforePaste;\n/** @type {?} */\nGridComponent.prototype.beforePdfExport;\n/** @type {?} */\nGridComponent.prototype.beforePrint;\n/** @type {?} */\nGridComponent.prototype.beginEdit;\n/** @type {?} */\nGridComponent.prototype.cellDeselected;\n/** @type {?} */\nGridComponent.prototype.cellDeselecting;\n/** @type {?} */\nGridComponent.prototype.cellEdit;\n/** @type {?} */\nGridComponent.prototype.cellSave;\n/** @type {?} */\nGridComponent.prototype.cellSaved;\n/** @type {?} */\nGridComponent.prototype.cellSelected;\n/** @type {?} */\nGridComponent.prototype.cellSelecting;\n/** @type {?} */\nGridComponent.prototype.checkBoxChange;\n/** @type {?} */\nGridComponent.prototype.columnDataStateChange;\n/** @type {?} */\nGridComponent.prototype.columnDeselected;\n/** @type {?} */\nGridComponent.prototype.columnDeselecting;\n/** @type {?} */\nGridComponent.prototype.columnDrag;\n/** @type {?} */\nGridComponent.prototype.columnDragStart;\n/** @type {?} */\nGridComponent.prototype.columnDrop;\n/** @type {?} */\nGridComponent.prototype.columnMenuClick;\n/** @type {?} */\nGridComponent.prototype.columnMenuOpen;\n/** @type {?} */\nGridComponent.prototype.columnSelected;\n/** @type {?} */\nGridComponent.prototype.columnSelecting;\n/** @type {?} */\nGridComponent.prototype.commandClick;\n/** @type {?} */\nGridComponent.prototype.contextMenuClick;\n/** @type {?} */\nGridComponent.prototype.contextMenuOpen;\n/** @type {?} */\nGridComponent.prototype.created;\n/** @type {?} */\nGridComponent.prototype.dataBound;\n/** @type {?} */\nGridComponent.prototype.dataSourceChanged;\n/** @type {?} */\nGridComponent.prototype.dataStateChange;\n/** @type {?} */\nGridComponent.prototype.destroyed;\n/** @type {?} */\nGridComponent.prototype.detailDataBound;\n/** @type {?} */\nGridComponent.prototype.excelAggregateQueryCellInfo;\n/** @type {?} */\nGridComponent.prototype.excelExportComplete;\n/** @type {?} */\nGridComponent.prototype.excelHeaderQueryCellInfo;\n/** @type {?} */\nGridComponent.prototype.excelQueryCellInfo;\n/** @type {?} */\nGridComponent.prototype.exportDetailDataBound;\n/** @type {?} */\nGridComponent.prototype.exportGroupCaption;\n/** @type {?} */\nGridComponent.prototype.headerCellInfo;\n/** @type {?} */\nGridComponent.prototype.keyPressed;\n/** @type {?} */\nGridComponent.prototype.lazyLoadGroupCollapse;\n/** @type {?} */\nGridComponent.prototype.lazyLoadGroupExpand;\n/** @type {?} */\nGridComponent.prototype.load;\n/** @type {?} */\nGridComponent.prototype.pdfAggregateQueryCellInfo;\n/** @type {?} */\nGridComponent.prototype.pdfExportComplete;\n/** @type {?} */\nGridComponent.prototype.pdfHeaderQueryCellInfo;\n/** @type {?} */\nGridComponent.prototype.pdfQueryCellInfo;\n/** @type {?} */\nGridComponent.prototype.printComplete;\n/** @type {?} */\nGridComponent.prototype.queryCellInfo;\n/** @type {?} */\nGridComponent.prototype.recordClick;\n/** @type {?} */\nGridComponent.prototype.recordDoubleClick;\n/** @type {?} */\nGridComponent.prototype.resizeStart;\n/** @type {?} */\nGridComponent.prototype.resizeStop;\n/** @type {?} */\nGridComponent.prototype.resizing;\n/** @type {?} */\nGridComponent.prototype.rowDataBound;\n/** @type {?} */\nGridComponent.prototype.rowDeselected;\n/** @type {?} */\nGridComponent.prototype.rowDeselecting;\n/** @type {?} */\nGridComponent.prototype.rowDrag;\n/** @type {?} */\nGridComponent.prototype.rowDragStart;\n/** @type {?} */\nGridComponent.prototype.rowDragStartHelper;\n/** @type {?} */\nGridComponent.prototype.rowDrop;\n/** @type {?} */\nGridComponent.prototype.rowSelected;\n/** @type {?} */\nGridComponent.prototype.rowSelecting;\n/** @type {?} */\nGridComponent.prototype.toolbarClick;\n/** @type {?} */\nGridComponent.prototype.dataSourceChange;\n/** @type {?} */\nGridComponent.prototype.childColumns;\n/** @type {?} */\nGridComponent.prototype.childAggregates;\n/** @type {?} */\nGridComponent.prototype.tags;\n/**\n * The row template that renders customized rows from the given template. \n * By default, Grid renders a table row for every data source item. \n * > * It accepts either [template string](../../common/template-engine/) or HTML element ID. \n * > * The row template must be a table row.\n * \n * > Check the [`Row Template`](../../grid/row/) customization.\n * \n * @type {?}\n */\nGridComponent.prototype.rowTemplate;\n/**\n * The detail template allows you to show or hide additional information about a particular row.\n * \n * > It accepts either the [template string](../../common/template-engine/) or the HTML element ID.\n * \n * {% codeBlock src=\"grid/detail-template-api/index.ts\" %}{% endcodeBlock %}\n * \n * @type {?}\n */\nGridComponent.prototype.detailTemplate;\n/**\n * It used to render toolbar template\n * \\@default null\n * @type {?}\n */\nGridComponent.prototype.toolbarTemplate;\n/**\n * It used to render pager template\n * \\@default null\n * @type {?}\n */\nGridComponent.prototype.pagerTemplate;\n/** @type {?} */\nGridComponent.prototype.editSettings_template;\n/** @type {?} */\nGridComponent.prototype.groupSettings_captionTemplate;\n/** @type {?} */\nGridComponent.prototype.registerEvents;\n/** @type {?} */\nGridComponent.prototype.addTwoWay;\n/** @type {?} */\nGridComponent.prototype.ngEle;\n/** @type {?} */\nGridComponent.prototype.srenderer;\n/** @type {?} */\nGridComponent.prototype.viewContainerRef;\n/** @type {?} */\nGridComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StackedColumnDirective, StackedColumnsDirective } from './stacked-column.directive';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { AggregateColumnDirective, AggregateColumnsDirective } from './aggregate-columns.directive';\nimport { AggregateDirective, AggregatesDirective } from './aggregates.directive';\nimport { GridComponent } from './grid.component';\n/**\n * NgModule definition for the Grid component.\n */\nexport class GridModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        GridComponent,\n        StackedColumnDirective,\n        StackedColumnsDirective,\n        ColumnDirective,\n        ColumnsDirective,\n        AggregateColumnDirective,\n        AggregateColumnsDirective,\n        AggregateDirective,\n        AggregatesDirective\n    ],\n    exports: [\n        GridComponent,\n        StackedColumnDirective,\n        StackedColumnsDirective,\n        ColumnDirective,\n        ColumnsDirective,\n        AggregateColumnDirective,\n        AggregateColumnsDirective,\n        AggregateDirective,\n        AggregatesDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GridModule_tsickle_Closure_declarations() {\n/** @type {?} */\nGridModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGridModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StackedColumnDirective, StackedColumnsDirective } from './stacked-column.directive';\nimport { ColumnDirective, ColumnsDirective } from './columns.directive';\nimport { AggregateColumnDirective, AggregateColumnsDirective } from './aggregate-columns.directive';\nimport { AggregateDirective, AggregatesDirective } from './aggregates.directive';\nimport { GridComponent } from './grid.component';\nimport { GridModule } from './grid.module';\nimport {Filter, Page, Selection, Sort, Group, Reorder, RowDD, DetailRow, Toolbar, Aggregate, Search, VirtualScroll, Edit, Resize, ExcelExport, PdfExport, CommandColumn, ContextMenu, Freeze, ColumnMenu, ColumnChooser, ForeignKey, InfiniteScroll, LazyLoadGroup} from '@syncfusion/ej2-grids';\n\n\nexport const /** @type {?} */ FilterService: ValueProvider = { provide: 'GridsFilter', useValue: Filter};\nexport const /** @type {?} */ PageService: ValueProvider = { provide: 'GridsPage', useValue: Page};\nexport const /** @type {?} */ SelectionService: ValueProvider = { provide: 'GridsSelection', useValue: Selection};\nexport const /** @type {?} */ SortService: ValueProvider = { provide: 'GridsSort', useValue: Sort};\nexport const /** @type {?} */ GroupService: ValueProvider = { provide: 'GridsGroup', useValue: Group};\nexport const /** @type {?} */ ReorderService: ValueProvider = { provide: 'GridsReorder', useValue: Reorder};\nexport const /** @type {?} */ RowDDService: ValueProvider = { provide: 'GridsRowDD', useValue: RowDD};\nexport const /** @type {?} */ DetailRowService: ValueProvider = { provide: 'GridsDetailRow', useValue: DetailRow};\nexport const /** @type {?} */ ToolbarService: ValueProvider = { provide: 'GridsToolbar', useValue: Toolbar};\nexport const /** @type {?} */ AggregateService: ValueProvider = { provide: 'GridsAggregate', useValue: Aggregate};\nexport const /** @type {?} */ SearchService: ValueProvider = { provide: 'GridsSearch', useValue: Search};\nexport const /** @type {?} */ VirtualScrollService: ValueProvider = { provide: 'GridsVirtualScroll', useValue: VirtualScroll};\nexport const /** @type {?} */ EditService: ValueProvider = { provide: 'GridsEdit', useValue: Edit};\nexport const /** @type {?} */ ResizeService: ValueProvider = { provide: 'GridsResize', useValue: Resize};\nexport const /** @type {?} */ ExcelExportService: ValueProvider = { provide: 'GridsExcelExport', useValue: ExcelExport};\nexport const /** @type {?} */ PdfExportService: ValueProvider = { provide: 'GridsPdfExport', useValue: PdfExport};\nexport const /** @type {?} */ CommandColumnService: ValueProvider = { provide: 'GridsCommandColumn', useValue: CommandColumn};\nexport const /** @type {?} */ ContextMenuService: ValueProvider = { provide: 'GridsContextMenu', useValue: ContextMenu};\nexport const /** @type {?} */ FreezeService: ValueProvider = { provide: 'GridsFreeze', useValue: Freeze};\nexport const /** @type {?} */ ColumnMenuService: ValueProvider = { provide: 'GridsColumnMenu', useValue: ColumnMenu};\nexport const /** @type {?} */ ColumnChooserService: ValueProvider = { provide: 'GridsColumnChooser', useValue: ColumnChooser};\nexport const /** @type {?} */ ForeignKeyService: ValueProvider = { provide: 'GridsForeignKey', useValue: ForeignKey};\nexport const /** @type {?} */ InfiniteScrollService: ValueProvider = { provide: 'GridsInfiniteScroll', useValue: InfiniteScroll};\nexport const /** @type {?} */ LazyLoadGroupService: ValueProvider = { provide: 'GridsLazyLoadGroup', useValue: LazyLoadGroup};\n/**\n * NgModule definition for the Grid component with providers.\n */\nexport class GridAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, GridModule],\n    exports: [\n        GridModule\n    ],\n    providers:[\n        FilterService,\n        PageService,\n        SelectionService,\n        SortService,\n        GroupService,\n        ReorderService,\n        RowDDService,\n        DetailRowService,\n        ToolbarService,\n        AggregateService,\n        SearchService,\n        VirtualScrollService,\n        EditService,\n        ResizeService,\n        ExcelExportService,\n        PdfExportService,\n        CommandColumnService,\n        ContextMenuService,\n        FreezeService,\n        ColumnMenuService,\n        ColumnChooserService,\n        ForeignKeyService,\n        InfiniteScrollService,\n        LazyLoadGroupService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GridAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nGridAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGridAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, ElementRef, ViewContainerRef, ChangeDetectionStrategy, QueryList, Renderer2, Injector, ValueProvider, ContentChild } from '@angular/core';\nimport { ComponentBase, IComponentBase, applyMixins, ComponentMixins, PropertyCollectionInfo, setValue } from '@syncfusion/ej2-angular-base';\nimport { Pager } from '@syncfusion/ej2-grids';\nimport { Template } from '@syncfusion/ej2-angular-base';\n\n\nexport const /** @type {?} */ inputs: string[] = ['currentPage','customText','enableExternalMessage','enablePagerMessage','enablePersistence','enableQueryString','enableRtl','externalMessage','locale','pageCount','pageSize','pageSizes','template','totalRecordsCount'];\nexport const /** @type {?} */ outputs: string[] = ['click','created','dropDownChanged'];\nexport const /** @type {?} */ twoWays: string[] = [];\n/**\n * `ejs-pager` represents the Angular Pager Component.\n * ```html\n * <ejs-pager></ejs-pager>\n * ```\n */\n@ComponentMixins([ComponentBase])\nexport class PagerComponent extends Pager implements IComponentBase {\npublic context : any;\npublic tagObjects: any;\n\tclick: any;\n\tcreated: any;\npublic dropDownChanged: any;\n/**\n *  Defines the template as string or HTML element ID which renders customized elements in pager instead of default elements.\n * \\@default null\n */\n@Template()\n    public template: any;\n/**\n * @param {?} ngEle\n * @param {?} srenderer\n * @param {?} viewContainerRef\n * @param {?} injector\n */\nconstructor(private ngEle: ElementRef,\nprivate srenderer: Renderer2,\nprivate viewContainerRef:ViewContainerRef,\nprivate injector: Injector) {\n        super();\n        this.element = this.ngEle.nativeElement;\n        this.injectedModules = this.injectedModules || [];\n\n        this.registerEvents(outputs);\n        this.addTwoWay.call(this, twoWays);\n        setValue('currentInstance', this, this.viewContainerRef);\n        this.context  = new ComponentBase();\n    }\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        this.context.ngOnInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        this.context.ngAfterViewInit(this);\n    }\n/**\n * @return {?}\n */\npublic ngOnDestroy(): void {\n        this.context.ngOnDestroy(this);\n    }\n/**\n * @return {?}\n */\npublic ngAfterContentChecked(): void {\n        \n        this.context.ngAfterContentChecked(this);\n    }\npublic registerEvents: (eventList: string[]) => void;\npublic addTwoWay: (propList: string[]) => void;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ejs-pager',\n    inputs: inputs,\n    outputs: outputs,\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    queries: {\n\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ViewContainerRef, },\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ContentChild, args: ['template', ] },],\n};\n}\n\nfunction PagerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nPagerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPagerComponent.ctorParameters;\n/** @type {?} */\nPagerComponent.propDecorators;\n/** @type {?} */\nPagerComponent.prototype.context;\n/** @type {?} */\nPagerComponent.prototype.tagObjects;\n/** @type {?} */\nPagerComponent.prototype.click;\n/** @type {?} */\nPagerComponent.prototype.created;\n/** @type {?} */\nPagerComponent.prototype.dropDownChanged;\n/**\n *  Defines the template as string or HTML element ID which renders customized elements in pager instead of default elements.\n * \\@default null\n * @type {?}\n */\nPagerComponent.prototype.template;\n/** @type {?} */\nPagerComponent.prototype.registerEvents;\n/** @type {?} */\nPagerComponent.prototype.addTwoWay;\n/** @type {?} */\nPagerComponent.prototype.ngEle;\n/** @type {?} */\nPagerComponent.prototype.srenderer;\n/** @type {?} */\nPagerComponent.prototype.viewContainerRef;\n/** @type {?} */\nPagerComponent.prototype.injector;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PagerComponent } from './pager.component';\n/**\n * NgModule definition for the Pager component.\n */\nexport class PagerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule],\n    declarations: [\n        PagerComponent\n    ],\n    exports: [\n        PagerComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PagerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPagerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPagerModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ValueProvider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PagerComponent } from './pager.component';\nimport { PagerModule } from './pager.module';\n/**\n * NgModule definition for the Pager component with providers.\n */\nexport class PagerAllModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [CommonModule, PagerModule],\n    exports: [\n        PagerModule\n    ],\n    providers:[\n        \n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PagerAllModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPagerAllModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPagerAllModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["input","outputs","StackedColumnDirective","_super","viewContainerRef","_this","call","this","setValue","registerEvents","directivePropList","__extends","ComplexBase","decorators","type","Directive","args","selector","inputs","queries","ctorParameters","ViewContainerRef","propDecorators","template","ContentChild","headerTemplate","commandsTemplate","filter_itemTemplate","editTemplate","filterTemplate","__decorate","Template","prototype","StackedColumnsDirective","ArrayBase","children","ContentChildren","ColumnDirective","tags","childColumns","ColumnsDirective","AggregateColumnDirective","footerTemplate","groupFooterTemplate","groupCaptionTemplate","AggregateColumnsDirective","AggregateDirective","AggregatesDirective","twoWays","exports","GridComponent","ngEle","srenderer","injector","element","nativeElement","injectedModules","mod","get","indexOf","push","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","addTwoWay","context","ComponentBase","ngOnInit","ngAfterViewInit","ngOnDestroy","ngAfterContentChecked","tagObjects","instance","childAggregates","Grid","Component","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","Injector","rowTemplate","detailTemplate","toolbarTemplate","pagerTemplate","editSettings_template","groupSettings_captionTemplate","ComponentMixins","__metadata","GridModule","NgModule","imports","CommonModule","declarations","FilterService","provide","useValue","Filter","PageService","Page","SelectionService","Selection","SortService","Sort","GroupService","Group","ReorderService","Reorder","RowDDService","RowDD","DetailRowService","DetailRow","ToolbarService","Toolbar","AggregateService","Aggregate","SearchService","Search","VirtualScrollService","VirtualScroll","EditService","Edit","ResizeService","Resize","ExcelExportService","ExcelExport","PdfExportService","PdfExport","CommandColumnService","CommandColumn","ContextMenuService","ContextMenu","FreezeService","Freeze","ColumnMenuService","ColumnMenu","ColumnChooserService","ColumnChooser","ForeignKeyService","ForeignKey","InfiniteScrollService","InfiniteScroll","LazyLoadGroupService","LazyLoadGroup","GridAllModule","providers","PagerComponent","Pager","PagerModule","PagerAllModule"],"mappings":"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"}
