import { Permission } from "./file.model";

export class ItemRight {
   create: boolean;
   read: boolean;
   assign: boolean;
   delete: boolean;
   write: boolean;
   share: boolean;
   update: boolean;
   upload: boolean;
   download: boolean;
   isSystem: boolean;
   isSharing: boolean;
   isDelete: boolean;
   revision: boolean;
   moveable: boolean;
   level: any;
   folderName: any;
   folderType: any;
   path: any;
}

export class FolderInfo {
   recID: string;
   id: string;
   create: boolean;
   read: boolean;
   assign: boolean;
   delete: boolean;
   write: boolean;
   share: boolean;
   update: boolean;
   upload: boolean;
   isDelete: boolean;
   download: boolean;
   isSystem: boolean;
   isSharing: boolean;
   folderName: string;
   userName: string;
   owner: string;
   pathDisk: string;
   parentId: string;
   thumbnail: string;
   icon: string;
   level: string;
   folderType: any;
   isBookmark: any;
   hasChild: any;
   approval: any;
   revision: any;
   physical: any;
   approvers: any;
   copyrights: any;
   revisionNote: any;
   location: any;
   bookmarks: any;
   permissions: Permission[];
}

export class DataItem {
   recID: string;
   type: string;
   fullName: string;
   copy: boolean;
   dialog: string;
   id_to: string;
   parentId: string;
   files: FileList;
   view: string;
   objectType: string;
   objectID: string;
   functionID: string;
   remote: boolean;
   data: any;
   tree: boolean;
}

export class FolderInfoReturn {
   folder: FolderInfo
   isError: boolean
   error: string
   errorType: string
}

export class State {
   opened: boolean  // is the node open
   closed: boolean
   disabled: boolean  // is the node disabled
   selected: boolean  // is the node selected  
}

export class MyNode {
   state: string;
   data: NodeTree
}

export class NodeTreeAdd {
   parent: any;
   data: any;
}

export class NodeTree {
   id: string; // required
   data: any;
   parent: string // required
   text: string // node text
   icon: string // string for custom 
   html_data: any;
   state: any;
   rel: string;
   folder: any;
   type: any;
   children: []; // array of strings or objects  
   li_attr: any; // attributes for the generated LI node
   a_attr: any  // attributes for the generated A node
}

/*
id : "string" // will be autogenerated if omitted  
   text : "string" // node text  
   icon : "string" // string for custom  
   state : {  
      opened : boolean // is the node open  
      disabled : boolean // is the node disabled  
      selected : boolean // is the node selected  
   },  
   children : [] // array of strings or objects  
   li_attr : {} // attributes for the generated LI node  
   a_attr : {} // attributes for the generated A node  
*/